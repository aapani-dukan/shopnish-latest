// frontend/client/src/components/GoogleMapTracker.tsx

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import {
  GoogleMap,
  MarkerF,
  DirectionsService,
  DirectionsRenderer,
  useJsApiLoader,
} from '@react-google-maps/api';

// ----------------------------
// Interfaces and Constants (TypeScript Standards)
// ----------------------------

interface CustomerAddress {
  address: string;
  city: string;
  pincode: string;
  lat?: number; // Optional Lat/Lng for pre-geocoded addresses
  lng?: number; 
}

interface Location {
  lat: number;
  lng: number;
  timestamp?: string; // Delivery Boy Location
}

interface GoogleMapTrackerProps {
  // deliveryBoyLocation ‡§ï‡•ã Location interface ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è
  deliveryBoyLocation: Location | null; 
  customerAddress: CustomerAddress; 
}

const containerStyle = { width: '100%', height: '300px' };
const LIBRARIES: ('places' | 'geometry' | 'drawing' | 'localContext' | 'visualization' | 'marker')[] = [
    'places', 
    'geometry', 
    'marker' // Marker ‡§≤‡§æ‡§á‡§¨‡•ç‡§∞‡•á‡§∞‡•Ä ‡§ï‡•ã ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§¶‡§ø ‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡§∞ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç
];
const GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;

// ----------------------------
// Component Logic
// ----------------------------

const GoogleMapTracker: React.FC<GoogleMapTrackerProps> = ({ 
    customerAddress, 
    deliveryBoyLocation // Prop ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
}) => {
  // 'currentLocation' ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•â‡§Ø ‡§ï‡•Ä ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§ï‡•ã ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡•á‡§ó‡§æ
  const [currentLocation, setCurrentLocation] = useState<Location | null>(null);
  const [directionsResponse, setDirectionsResponse] = useState<google.maps.DirectionsResult | null>(null);
  const [distance, setDistance] = useState<string | null>(null);

  // 1. Google Maps Loader
  const { isLoaded, loadError } = useJsApiLoader({
    googleMapsApiKey: GOOGLE_MAPS_API_KEY || '',
    libraries: LIBRARIES,
  });

  // 2. Real-time GPS Tracking (useEffect)
  useEffect(() => {
    // ‡§Ö‡§ó‡§∞ deliveryBoyLocation prop ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ GPS Tracking ‡§® ‡§ö‡§≤‡§æ‡§è‡§Ç
    if (deliveryBoyLocation) {
      setCurrentLocation(deliveryBoyLocation);
      return;
    }

    // ‡§Ö‡§ó‡§∞ prop ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã (‡§∂‡§æ‡§Ø‡§¶) ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•â‡§Ø ‡§ñ‡•Å‡§¶ ‡§Ö‡§™‡§®‡•Ä ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à
    if (!navigator.geolocation) return;
    
    // ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠‡§ø‡§ï ‡§∏‡•ç‡§•‡§æ‡§®
    navigator.geolocation.getCurrentPosition((pos) => {
        setCurrentLocation({ lat: pos.coords.latitude, lng: pos.coords.longitude });
    }, (err) => console.error('Initial Geolocation error:', err), { enableHighAccuracy: true });

    // ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§∏‡•ç‡§•‡§æ‡§® ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç (‡§µ‡•â‡§ö‡§∞)
    const watcher = navigator.geolocation.watchPosition(
      (pos) => {
        setCurrentLocation({ lat: pos.coords.latitude, lng: pos.coords.longitude });
      },
      (err) => console.error('Geolocation error:', err),
      { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
    );

    // ‡§ï‡•ç‡§≤‡•Ä‡§®‡§Ö‡§™ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®
    return () => navigator.geolocation.clearWatch(watcher);
  }, [deliveryBoyLocation]);


  // 3. Destination (useMemo) - ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡§æ ‡§™‡§§‡§æ LatLng ‡§Ø‡§æ String ‡§Æ‡•á‡§Ç
  const destination = useMemo(() => {
    if (customerAddress.lat && customerAddress.lng) {
        return { lat: customerAddress.lat, lng: customerAddress.lng }; 
    }
    // ‡§Ø‡§¶‡§ø Lat/Lng ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó ‡§™‡§§‡•á ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç (Google Geocodes it)
    return `${customerAddress.address}, ${customerAddress.city}, ${customerAddress.pincode}`;
  }, [customerAddress]);
  
  // 4. Directions Callback (useCallback)
  const directionsCallback = useCallback(
    (response: google.maps.DirectionsResult | null) => {
      if (response && response.status === 'OK') {
        setDirectionsResponse(response);
        const leg = response.routes[0].legs[0];
        if (leg?.distance?.text) {
          setDistance(leg.distance.text);
        }
      } else if (response) {
        console.error('Directions failed:', response.status);
        setDirectionsResponse(null);
      }
    },
    []
  );

  // 5. Marker Icons (useMemo) - ‡§ï‡•á‡§µ‡§≤ ‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§≤‡•ã‡§° ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
  const { bikeIcon, homeIcon } = useMemo(() => {
    if (!isLoaded || !window.google?.maps) {
        return { bikeIcon: undefined, homeIcon: undefined }; 
    }
    
    // üèçÔ∏è ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•â‡§Ø ‡§Ü‡§á‡§ï‡•â‡§®
    const BIKE_ICON: google.maps.Icon = {
      url: 'https://raw.githubusercontent.com/aapani-dukan/shopnish-xyz/main/dist/public/assets/pngtree-delivery-bike-black-icon-vector-png-image_12551154.png', 
      scaledSize: new window.google.maps.Size(40, 40),
      anchor: new window.google.maps.Point(20, 40), 
    };
    
    // üè† ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§Ü‡§á‡§ï‡•â‡§® 
    const HOME_ICON: google.maps.Icon = {
      url: 'https://maps.gstatic.com/mapfiles/ms/micons/blue-dot.png',
      scaledSize: new window.google.maps.Size(32, 32),
    };
    
    return { bikeIcon: BIKE_ICON, homeIcon: HOME_ICON };
  }, [isLoaded]);


  // 6. Guards and Options
  if (loadError) return <div>‡§®‡§ï‡•ç‡§∂‡§æ ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§™‡§æ‡§Ø‡§æ: {String(loadError)}</div>;
  if (!isLoaded) return <div>‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§≤‡•ã‡§°‡§ø‡§Ç‡§ó...</div>;
  // ‡§Ø‡§¶‡§ø currentLocation ‡§Ö‡§≠‡•Ä ‡§≠‡•Ä null ‡§π‡•à (‡§Ø‡§æ‡§®‡•Ä, GPS ‡§∏‡•á ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§æ)
  if (!currentLocation) return <div>‡§Ü‡§™‡§ï‡•Ä ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...</div>; 

  const mapOptions = useMemo(() => ({
    mapId: 'SHOPNISH_TRACKER_MAP',
    disableDefaultUI: false,
    zoom: 14, // Zoom level ‡§ï‡•ã ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§ï‡§∞‡•á‡§Ç
    center: currentLocation, // Map ‡§ï‡§æ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞
  }), [currentLocation]);
  
  // ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡§æ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§∏‡•ç‡§•‡§æ‡§® (DirectionsRenderer ‡§∏‡•á)
  const customerLatLngFromDirections = directionsResponse?.routes[0]?.legs[0]?.end_location;

  // 7. Render
  return (
    <div className="relative w-full h-[300px]">
      <GoogleMap
        mapContainerStyle={containerStyle}
        center={currentLocation} // ‡§Ø‡§π currentLocation useMemo ‡§∏‡•á ‡§Ü ‡§∞‡§π‡§æ ‡§π‡•à
        zoom={14}
        options={mapOptions}
      >
        {/* Directions Service - ‡§ú‡§¨ ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•ã‡§Ç */}
        {currentLocation && destination && bikeIcon && homeIcon && (
          <DirectionsService
            options={{
              origin: currentLocation,
              destination: destination,
              travelMode: window.google.maps.TravelMode.DRIVING, 
            }}
            callback={directionsCallback}
          />
        )}

        {/* Directions Renderer */}
        {directionsResponse && (
          <DirectionsRenderer
            options={{
              directions: directionsResponse,
              suppressMarkers: true, // ‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡§∞ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è true
              polylineOptions: {
                strokeColor: '#2563eb',
                strokeWeight: 5,
              },
            }}
          />
        )}
        
        {/* Delivery Boy Marker */}
        {bikeIcon && (
          <MarkerF 
            position={currentLocation} 
            icon={bikeIcon} 
            title="‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡§æ‡§∞‡•ç‡§ü‡§®‡§∞" 
          />
        )}
        
        {/* Customer Marker - DirectionsRenderer ‡§ï‡•á end_location ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§¶‡§ø ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•ã, ‡§Ø‡§æ prop ‡§ï‡§æ*/}
        {homeIcon && (customerLatLngFromDirections || (customerAddress.lat && customerAddress.lng)) && (
          <MarkerF
            position={customerLatLngFromDirections || {lat: customerAddress.lat!, lng: customerAddress.lng!}}
            icon={homeIcon}
            title="‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§≤‡•ã‡§ï‡•á‡§∂‡§®"
          />
        )}
      </GoogleMap>

      {/* Distance Info */}
      {distance && (
        <div className="absolute bottom-2 right-2 bg-white shadow-md rounded-lg px-3 py-1 text-sm font-medium text-gray-700">
          ‡§¶‡•Ç‡§∞‡•Ä: {distance}
        </div>
      )}
    </div>
  );
};

export default React.memo(GoogleMapTracker);
