import React, { useState, useEffect, useMemo } from "react";
import { useMutation, useQueryClient, useQuery } from "@tanstack/react-query";

import {
  User as UserIcon, 
  LogOut,
  Package,
  Clock,
  CheckCircle,
  Navigation,
  Loader2,
  Calendar,
  Zap,
} from "lucide-react";

import { format } from "date-fns"; 

import DeliveryOtpDialog from "./DeliveryOtpDialog"; 
import DeliveryOrdersList from "./DeliveryOrdersList"; 
import { useAuth } from "../hooks/useAuth"; 
import { useSocket } from "../hooks/useSocket"; 
import { apiRequest } from "../lib/queryClient"; 
import api from "../lib/api";
import { Card, CardHeader, CardTitle, CardContent } from "../components/ui/card"; 
import { Badge } from "../components/ui/badge"; 
import { Button } from "../components/ui/button"; 
import { useToast } from "../hooks/use-toast"; 
import { Label } from "../components/ui/label"; 
import { Input } from "../components/ui/input"; 

// --- Utility Functions ---
const getStatusColor = (status: string) => {
  switch (status) {
    case "pending":          return "bg-amber-600 hover:bg-amber-700";
    case "accepted":         return "bg-blue-600 hover:bg-blue-700";
    case "ready_for_pickup": return "bg-yellow-500 hover:bg-yellow-600";
    case "picked_up":        return "bg-indigo-600 hover:bg-indigo-700";
    case "out_for_delivery": return "bg-purple-600 hover:bg-purple-700";
    case "delivered":        return "bg-green-600 hover:bg-green-700";
    case "rejected":
    case "cancelled":        return "bg-red-500 hover:bg-red-600";
    default:                 return "bg-gray-500 hover:bg-gray-600";
  }
};

const getStatusText = (status: string) => {
  switch (status) {
    case "pending":          return "‡§≤‡§Ç‡§¨‡§ø‡§§ (‡§â‡§™‡§≤‡§¨‡•ç‡§ß)";
    case "accepted":         return "‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ (‡§Ö‡§∏‡§æ‡§á‡§®)";
    case "preparing":        return "‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à";
    case "ready_for_pickup": return "‡§™‡§ø‡§ï‡§Ö‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞";
    case "picked_up":        return "‡§™‡§ø‡§ï‡§Ö‡§™ ‡§π‡•ã ‡§ó‡§Ø‡§æ";
    case "out_for_delivery": return "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§ï‡§≤‡§æ";
    case "delivered":        return "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ";
    case "rejected":         return "‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§";
    case "cancelled":        return "‡§∞‡§¶‡•ç‡§¶";
    default:                 return status || "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§";
  }
};

const getNextStatus = (current: string) => {
  switch (current) {
    case "ready_for_pickup":  return "picked_up";
    case "picked_up":         return "out_for_delivery";
    case "out_for_delivery":  return null; 
    default:                  return null;
  }
};

const getNextStatusLabel = (status: string) => {
  switch (status) {
    case "ready_for_pickup":  return "‡§™‡§ø‡§ï‡§Ö‡§™ ‡§ï‡§∞‡•á‡§Ç";
    case "picked_up":         return "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§ï‡§≤‡•á";
    case "out_for_delivery":  return "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç (OTP)";
    default:                  return "";
  }
};
// --- Main Component ---
export default function DeliveryDashboard() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { user, auth, isLoadingAuth, isAuthenticated } = useAuth();
  const rawSocket = useSocket() as any;
  const socket = rawSocket?.socket ?? rawSocket;

  const [selectedOrder, setSelectedOrder] = useState<any>(null);
  const [otpDialogOpen, setOtpDialogOpen] = useState(false);
  const [activeTab, setActiveTab] = useState(0); 
  const [dateFilter, setDateFilter] = useState<Date | null>(() => {
    const fiveDaysAgo = new Date();
    fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);
    return fiveDaysAgo;
  });

  useEffect(() => {
    if (!user || !auth?.currentUser) return;
    try {
      const deliveryBoyId = user?.deliveryBoyId;
      if (deliveryBoyId !== undefined) {
        sessionStorage.setItem("deliveryBoyUser", JSON.stringify({ ...user, deliveryBoyId }));
      }
    } catch (err) {
      console.error("Delivery boy session store error:", err);
    }
  }, [user, auth?.currentUser]);


  const myDeliveryBoyId = user?.deliveryBoyId; 
  console.log("DEBUG: myDeliveryBoyId from user object (before useQuery):", myDeliveryBoyId); 


  const { data: orders = [], isLoading } = useQuery({
    queryKey: ["deliveryOrders"],
    queryFn: async () => {
      try {
        const [availableRes, myRes] = await Promise.allSettled([
        api.get("/api/delivery/orders/available"),
          api.get("/api/delivery/orders/my"), 
        ]);
        
        // ‚ú® Axios Response ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§¶‡§≤‡§æ‡§µ: .data.orders ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
        const availableOrders =
          availableRes.status === "fulfilled" && availableRes.value && Array.isArray((availableRes.value as any).data?.orders)
            ? (availableRes.value as any).data.orders
            : [];
            
        // ‚ú® Axios Response ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§¶‡§≤‡§æ‡§µ: .data.orders ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
        const myOrders =
          myRes.status === "fulfilled" && myRes.value && Array.isArray((myRes.value as any).data?.orders)
            ? (myRes.value as any).data.orders
            : [];
            
        // ‡§Ø‡§π‡§æ‡§Å ‡§∏‡•á ‡§Ü‡§ó‡•á ‡§ï‡•Ä ‡§≤‡•â‡§ú‡§ø‡§ï ‡§∏‡§π‡•Ä ‡§π‡•à
        const map = new Map();
        [...availableOrders, ...myOrders].forEach((o) => {
          if (o && typeof o.id === "number") {
            map.set(o.id, {
              ...o,
              isMine: Number(o.deliveryBoyId) === Number(user?.deliveryBoyId),
            });
          }
        });
        
        console.log("‚úÖ Fetched Orders Count:", map.size); // Debugging ‡§ï‡•á ‡§≤‡§ø‡§è
        return Array.from(map.values());
        
      } catch (err) {
        console.error("‡§ë‡§∞‡•ç‡§°‡§∞ ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:", err);
        toast({
          title: "‡§°‡•á‡§ü‡§æ ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
          description: "‡§ë‡§∞‡•ç‡§°‡§∞ ‡§≤‡§æ‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§ï‡•ã‡§à ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à",
          variant: "destructive",
        });
        return [];
      }
    },
    enabled: isAuthenticated && !!user && myDeliveryBoyId !== undefined && myDeliveryBoyId !== null,
  });
  

  useEffect(() => {
    if (!socket || !user) return;
    const onOrdersChanged = () => queryClient.invalidateQueries({ queryKey: ["deliveryOrders"] });
    if (typeof socket.emit === 'function') socket.emit("register-client", { role: "delivery", userId: user.uid ?? user.id });
    if (typeof socket.on === 'function') {
      socket.on("delivery:orders-changed", onOrdersChanged);
      socket.on("new-order", onOrdersChanged);
      socket.on("order:update", onOrdersChanged);
    }
    return () => {
      if (typeof socket.off === 'function') {
        socket.off("delivery:orders-changed", onOrdersChanged);
        socket.off("new-order", onOrdersChanged);
        socket.off("order:update", onOrdersChanged);
      }
    };
  }, [socket, user, queryClient, isAuthenticated]);

  // GPS tracking
  useEffect(() => {
    if (!socket || !user || isLoading || myDeliveryBoyId === undefined || myDeliveryBoyId === null) return;

    let watchId: number | null = null;

    const activeOrder = orders.find((o: any) =>
      Number(o.deliveryBoyId) === Number(myDeliveryBoyId) &&
      (o.deliveryStatus ?? "").toLowerCase() === "accepted" &&
      (o.status === "picked_up" || o.status === "out_for_delivery")
    );

    if (activeOrder && navigator.geolocation) {
      console.log(`üì° Starting GPS tracking for order ${activeOrder.id}`);

      const sendLocation = (position: GeolocationPosition) => {
        const { latitude, longitude } = position.coords;
        if (typeof socket.emit === 'function') {
          socket.emit("deliveryBoy:location_update", {
            orderId: activeOrder.id,
            lat: latitude,
            lng: longitude,
            timestamp: new Date().toISOString()
          });
        } else {
            console.error("‚ùå Socket.emit is not a function in GPS tracking.");
        }
      };

      watchId = navigator.geolocation.watchPosition(
        sendLocation,
        (error) => {
          console.error("‚ùå Geolocation error:", error.message);
          if (error.code === error.PERMISSION_DENIED) {
            toast({
              title: "GPS ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï",
              description: "‡§∞‡§ø‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§•‡§æ‡§® (location) ‡§™‡§π‡•Å‡§Å‡§ö ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç‡•§",
              variant: "destructive",
            });
          }
        },
        { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
      );
    }

    return () => {
      if (watchId !== null) navigator.geolocation.clearWatch(watchId);
    };
  }, [orders, socket, user, isLoading, toast, myDeliveryBoyId]);

  // Mutations
  const acceptOrderMutation = useMutation({
    mutationFn: (orderId: number) => api.post("/api/delivery/accept", { orderId }),
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ["deliveryOrders"] }),
    onError: () => toast({ title: "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø", description: "‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤", variant: "destructive" }),
  });

  const updateStatusMutation = useMutation({
    mutationFn: ({ orderId, newStatus }: { orderId: number; newStatus: string }) =>
      api.patch(`/api/delivery/orders/${orderId}/status`, { newStatus }),
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ["deliveryOrders"] }),
    onError: () => toast({ title: "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø", description: "‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤", variant: "destructive" }),
  });



// ‚úÖ OTP Submit + Complete Delivery
const handleOtpSubmitMutation = useMutation({
  mutationFn: async ({ orderId, otp }: { orderId: number; otp: string }) => {
    let data; // ‚ú® ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§°‡§ø‡§ï‡•ç‡§≤‡•á‡§Ø‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§á‡§∏‡•á `try` ‡§î‡§∞ `catch` ‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡•á ‡§¨‡§æ‡§π‡§∞ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡•á

    try {
      // ‚úÖ Axios `api.post` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§ Axios ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§´‡•á‡§Ç‡§ï‡§§‡§æ ‡§π‡•à‡•§
      const response = await api.post(`/api/delivery/orders/${orderId}/complete-delivery`, { otp });
      data = response.data; // ‚ú® Axios ‡§Æ‡•á‡§Ç, ‡§°‡•á‡§ü‡§æ `response.data` ‡§™‡•ç‡§∞‡•â‡§™‡§∞‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§ `response.json()` ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§

      // üî• `response.status === 401` ‡§î‡§∞ `!response.ok` ‡§ú‡•à‡§∏‡•Ä ‡§ú‡§æ‡§Å‡§ö‡•ã‡§Ç ‡§ï‡•Ä ‡§Ö‡§¨ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§
      //    ‡§Ø‡§¶‡§ø Axios ‡§ï‡•ã 4xx ‡§Ø‡§æ 5xx ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡•ã‡§° ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§µ‡§π ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§´‡•á‡§Ç‡§ï ‡§¶‡•á‡§ó‡§æ,
      //    ‡§ú‡§ø‡§∏‡•á `catch` ‡§¨‡•ç‡§≤‡•â‡§ï ‡§Æ‡•á‡§Ç ‡§™‡§ï‡§°‡§º‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§
      // üî• `const data = await response.json();` ‡§≤‡§æ‡§á‡§® ‡§≠‡•Ä ‡§π‡§ü‡§æ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø `response.data` ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§™‡§æ‡§∞‡•ç‡§∏ ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•Å‡§Ü ‡§°‡•á‡§ü‡§æ ‡§π‡•à‡•§

    } catch (error: any) {
      // ‚ú® Axios ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§™‡§ï‡§°‡§º‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
      console.error("handleOtpSubmitMutation error:", error);
      
      if (error.response) {
        // ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∏‡•á ‡§è‡§ï ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§Æ‡§ø‡§≤‡•Ä (‡§ú‡•à‡§∏‡•á 401, 404, 500)
        if (error.response.status === 401) {
          throw new Error("OTP ‡§ó‡§≤‡§§ ‡§π‡•à‡•§");
        }
        // ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å, ‡§Ø‡§¶‡§ø ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•ã
        throw new Error(error.response.data.message || "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤");
      } else if (error.request) {
        // ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ ‡§•‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä (‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§°‡§æ‡§â‡§®, CORS ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ)
        throw new Error("‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§§‡§ï ‡§™‡§π‡•Å‡§Å‡§ö‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤ ‡§π‡•à‡•§");
      } else {
        // ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∏‡•á‡§ü ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§ó‡§≤‡§§ ‡§π‡•ã ‡§ó‡§Ø‡§æ
        throw new Error(error.message || "‡§Ö‡§®‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§");
      }
    }

    // ‚úÖ Delivery ‡§∏‡§´‡§≤ ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ WhatsApp ‡§™‡§∞ "Thanks" ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•ã
    // üî• ‡§Ø‡§π‡§æ‡§Å ‡§≠‡•Ä `fetch` ‡§ï‡•Ä ‡§ú‡§ó‡§π `api.post` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§á‡§Ç‡§ü‡§∞‡§∏‡•á‡§™‡•ç‡§ü‡§∞ ‡§ë‡§•‡•á‡§Ç‡§ü‡§ø‡§ï‡•á‡§∂‡§® ‡§π‡•á‡§°‡§∞ ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡•á‡•§
    //    `API_BASE` ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§
    await api.post(`/api/whatsapp/send-delivery-thanks`, {
      orderId,
      customerPhone: data?.customerPhone, // ‚ú® `data` ‡§Ö‡§¨ ‡§Ø‡§π‡§æ‡§Å ‡§è‡§ï‡•ç‡§∏‡•á‡§∏‡§ø‡§¨‡§≤ ‡§π‡•à
      customerName: data?.customerName,
    }).catch((err) => console.warn("‚ö†Ô∏è WhatsApp Thanks Message ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ:", err));

    return data; // ‚ú® ‡§∏‡§´‡§≤ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§Ø‡§π ‡§°‡•á‡§ü‡§æ ‡§µ‡§æ‡§™‡§∏ ‡§π‡•ã‡§ó‡§æ
  },

  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: ["deliveryOrders"] });
    toast({
      title: "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§π‡•Å‡§à",
      description: "‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§",
      variant: "success",
    });
    setOtpDialogOpen(false);
    setSelectedOrder(null);
  },

  onError: (error: any) => {
    // ‚ú® ‡§Ø‡§π‡§æ‡§Å error.message ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä `mutationFn` ‡§ï‡•á catch ‡§¨‡•ç‡§≤‡•â‡§ï ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§ü ‡§π‡•ã ‡§ö‡•Å‡§ï‡§æ ‡§π‡•ã‡§ó‡§æ
    toast({
      title: "OTP ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
      description: error.message || "OTP ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§",
      variant: "destructive",
    });
  },
});
  

// ‚úÖ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•ã WhatsApp ‡§™‡§∞ OTP ‡§≠‡•á‡§ú‡§®‡•á ‡§µ‡§æ‡§≤‡§æ mutation
// ‚úÖ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•ã WhatsApp ‡§™‡§∞ OTP ‡§≠‡•á‡§ú‡§®‡•á ‡§µ‡§æ‡§≤‡§æ mutation
const sendOtpToCustomerMutation = useMutation({
  mutationFn: async (orderId: number) => {
    
    // Axios ‡§á‡§Ç‡§ü‡§∞‡§∏‡•á‡§™‡•ç‡§ü‡§∞ ‡§ë‡§•‡•á‡§Ç‡§ü‡§ø‡§ï‡•á‡§∂‡§® ‡§î‡§∞ baseURL ‡§ï‡•ã ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§∏‡§Ç‡§≠‡§æ‡§≤ ‡§≤‡•á‡§ó‡§æ‡•§

    let data; // ‚ú® ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§°‡§ø‡§ï‡•ç‡§≤‡•á‡§Ø‡§∞ ‡§ï‡§∞‡•á‡§Ç

    try {
      
      const response = await api.post(`/api/whatsapp/send-otp`, { orderId }); 
      data = response.data; // ‚ú® Axios ‡§Æ‡•á‡§Ç, ‡§°‡•á‡§ü‡§æ `response.data` ‡§™‡•ç‡§∞‡•â‡§™‡§∞‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

      // üî• `!response.ok` ‡§ú‡•à‡§∏‡•Ä ‡§ú‡§æ‡§Å‡§ö‡•ã‡§Ç ‡§ï‡•Ä ‡§Ö‡§¨ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à,
      //    Axios ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á 4xx/5xx ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡•ã‡§° ‡§™‡§∞ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§´‡•á‡§Ç‡§ï‡§§‡§æ ‡§π‡•à‡•§
      // üî• `response.json()` ‡§ï‡•Ä ‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§

    } catch (error: any) {
      // ‚ú® Axios ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§™‡§ï‡§°‡§º‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
      console.error("sendOtpToCustomerMutation error:", error);

      if (error.response) {
        // ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∏‡•á ‡§è‡§ï ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§Æ‡§ø‡§≤‡•Ä (‡§ú‡•ã 2xx ‡§∞‡•á‡§Ç‡§ú ‡§∏‡•á ‡§¨‡§æ‡§π‡§∞ ‡§•‡•Ä)
        // ‡§Ø‡§¶‡§ø ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Ü‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å‡•§
        throw new Error(error.response.data.message || "‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•ã OTP ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤");
      } else if (error.request) {
        // ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ ‡§•‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä (‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø)
        throw new Error("‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§§‡§ï ‡§™‡§π‡•Å‡§Å‡§ö‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤ ‡§π‡•à‡•§");
      } else {
        // ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∏‡•á‡§ü ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§ó‡§≤‡§§ ‡§π‡•ã ‡§ó‡§Ø‡§æ
        throw new Error(error.message || "‡§Ö‡§®‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§");
      }
    }

    return data; // ‚ú® ‡§∏‡§´‡§≤ ‡§°‡•á‡§ü‡§æ ‡§µ‡§æ‡§™‡§∏ ‡§ï‡§∞‡•á‡§Ç
  },

  onSuccess: () => {
    toast({
      title: "OTP ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ",
      description: "‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•ã WhatsApp ‡§™‡§∞ OTP ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§",
      variant: "success",
    });
    queryClient.invalidateQueries({ queryKey: ["deliveryOrders"] });
  },

  onError: (error: any) => {
    // ‚ú® ‡§Ø‡§π‡§æ‡§Å error.message `mutationFn` ‡§ï‡•á catch ‡§¨‡•ç‡§≤‡•â‡§ï ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§ü ‡§π‡•ã ‡§ö‡•Å‡§ï‡§æ ‡§π‡•ã‡§ó‡§æ
    toast({
      title: "OTP ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤",
      description: error.message || "‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
      variant: "destructive",
    });
  },
});


// ‚úÖ ‡§¨‡§ø‡§®‡§æ OTP ‡§ï‡•á ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ mutation
const completeWithoutOtpMutation = useMutation({
  mutationFn: async (orderId: number) => {
    // üî• `getValidToken()` ‡§î‡§∞ `API_BASE` ‡§ï‡•Ä ‡§Ö‡§¨ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§
    // Axios ‡§á‡§Ç‡§ü‡§∞‡§∏‡•á‡§™‡•ç‡§ü‡§∞ ‡§ë‡§•‡•á‡§Ç‡§ü‡§ø‡§ï‡•á‡§∂‡§® ‡§î‡§∞ baseURL ‡§ï‡•ã ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§∏‡§Ç‡§≠‡§æ‡§≤ ‡§≤‡•á‡§ó‡§æ‡•§

    let data; // ‚ú® ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§°‡§ø‡§ï‡•ç‡§≤‡•á‡§Ø‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§á‡§∏‡•á `try` ‡§î‡§∞ `catch` ‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡•á ‡§¨‡§æ‡§π‡§∞ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡•á

    try {
      // ‚úÖ `fetch` ‡§ï‡•Ä ‡§ú‡§ó‡§π `api.post` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
      const response = await api.post(`/api/delivery/orders/${orderId}/complete-without-otp`);
      data = response.data; // ‚ú® Axios ‡§Æ‡•á‡§Ç, ‡§°‡•á‡§ü‡§æ `response.data` ‡§™‡•ç‡§∞‡•â‡§™‡§∞‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

      // üî• `!response.ok` ‡§ú‡•à‡§∏‡•Ä ‡§ú‡§æ‡§Å‡§ö‡•ã‡§Ç ‡§ï‡•Ä ‡§Ö‡§¨ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à,
      //    Axios ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á 4xx/5xx ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡•ã‡§° ‡§™‡§∞ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§´‡•á‡§Ç‡§ï‡§§‡§æ ‡§π‡•à‡•§
      // üî• `response.json()` ‡§ï‡•Ä ‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§

    } catch (error: any) {
      // ‚ú® Axios ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§™‡§ï‡§°‡§º‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
      console.error("completeWithoutOtpMutation error:", error);

      if (error.response) {
        // ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∏‡•á ‡§è‡§ï ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§Æ‡§ø‡§≤‡•Ä (‡§ú‡•ã 2xx ‡§∞‡•á‡§Ç‡§ú ‡§∏‡•á ‡§¨‡§æ‡§π‡§∞ ‡§•‡•Ä)
        throw new Error(error.response.data.message || "‡§¨‡§ø‡§®‡§æ OTP ‡§ï‡•á ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§");
      } else if (error.request) {
        // ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ ‡§•‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä (‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø)
        throw new Error("‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§§‡§ï ‡§™‡§π‡•Å‡§Å‡§ö‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤ ‡§π‡•à‡•§");
      } else {
        // ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∏‡•á‡§ü ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§ó‡§≤‡§§ ‡§π‡•ã ‡§ó‡§Ø‡§æ
        throw new Error(error.message || "‡§Ö‡§®‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§");
      }
    }

    // ‚úÖ WhatsApp Thanks Message ‡§≠‡•á‡§ú‡•ã
    // üî• ‡§Ø‡§π‡§æ‡§Å ‡§≠‡•Ä `fetch` ‡§ï‡•Ä ‡§ú‡§ó‡§π `api.post` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
    await api.post(`/api/whatsapp/send-delivery-thanks`, {
      orderId,
      customerPhone: data?.customerPhone, // ‚ú® `data` ‡§Ö‡§¨ ‡§Ø‡§π‡§æ‡§Å ‡§è‡§ï‡•ç‡§∏‡•á‡§∏‡§ø‡§¨‡§≤ ‡§π‡•à
      customerName: data?.customerName,
    }).catch((err) => console.warn("‚ö†Ô∏è WhatsApp Thanks Message ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ:", err));

    return data; // ‚ú® ‡§∏‡§´‡§≤ ‡§°‡•á‡§ü‡§æ ‡§µ‡§æ‡§™‡§∏ ‡§ï‡§∞‡•á‡§Ç
  },

  onSuccess: () => {
    toast({
      title: "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§π‡•Å‡§à",
      description: "‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¨‡§ø‡§®‡§æ OTP ‡§ï‡•á ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§",
      variant: "success",
    });
    setOtpDialogOpen(false);
    setSelectedOrder(null);
    queryClient.invalidateQueries({ queryKey: ["deliveryOrders"] }); // ‚ú® ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä ‡§ï‡•ã ‡§á‡§®‡§µ‡•à‡§≤‡§ø‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
  },

  onError: (error: any) => {
    // ‚ú® ‡§Ø‡§π‡§æ‡§Å error.message `mutationFn` ‡§ï‡•á catch ‡§¨‡•ç‡§≤‡•â‡§ï ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§ü ‡§π‡•ã ‡§ö‡•Å‡§ï‡§æ ‡§π‡•ã‡§ó‡§æ
    toast({
      title: "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
      description: error.message || "‡§¨‡§ø‡§®‡§æ OTP ‡§ï‡•á ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§",
      variant: "destructive",
    });
  },
});
  

    
  
  const handleStatusProgress = (order: any) => {
    console.log("handleStatusProgress: Order ID:", order.id, "Current Status:", order.status);
    
    const currentStatus = (order.status ?? "").toLowerCase().trim();
    console.log("handleStatusProgress: Trimmed and lowercased status:", currentStatus);

    if (currentStatus === "out_for_delivery") {
      console.log("handleStatusProgress: Status is 'out_for_delivery'. Opening OTP dialog.");
      setSelectedOrder(order);
      setOtpDialogOpen(true);
      return;
    }

    const next = getNextStatus(currentStatus);
    console.log("handleStatusProgress: Next expected status:", next);

    if (!next) {
        console.log("handleStatusProgress: No next status defined for current status. Stopping.");
        return;
    }

    if (next === "out_for_delivery") {
      console.log(`handleStatusProgress: Moving to 'out_for_delivery' from '${currentStatus}'. Triggering sendOtpToCustomerMutation.`);
      // ‡§Ø‡§π mutation OTP ‡§≠‡•á‡§ú‡•á‡§ó‡§æ ‡§î‡§∞ ‡§¨‡•à‡§ï‡§è‡§Ç‡§° ‡§ï‡•ã ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ 'out_for_delivery' ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
      sendOtpToCustomerMutation.mutate(order.id); 
    } else {
        console.log(`handleStatusProgress: Updating status for order ${order.id} to '${next}'.`);
        updateStatusMutation.mutate({ orderId: order.id, newStatus: next });
    }
};

  const handleOtpConfirmation = (otpValue: string) => {
    console.log("handleOtpConfirmation: Confirming OTP for Order ID:", selectedOrder?.id, "OTP entered:", otpValue);
    if (!selectedOrder || otpValue.trim().length !== 4) {
      toast({ title: "OTP ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç", description: "4-‡§Ö‡§Ç‡§ï‡•ã‡§Ç ‡§ï‡§æ OTP ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§", variant: "destructive" });
      return;
    }
    handleOtpSubmitMutation.mutate({ orderId: selectedOrder.id, otp: otpValue });
  };

  const handleSendManualOtp = (orderId: number) => {
    console.log("handleSendManualOtp: Initiating manual OTP send for Order ID:", orderId);
    sendManualOtpMutation.mutate(orderId);
  };

  const handleCompleteWithoutOtp = (orderId: number) => {
    console.log("handleCompleteWithoutOtp: Attempting to complete delivery without OTP for Order ID:", orderId);
    if (window.confirm("‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§µ‡§æ‡§ï‡§à ‡§á‡§∏ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•ã ‡§¨‡§ø‡§®‡§æ OTP ‡§ï‡•á ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? ‡§Ø‡§π ‡§ï‡•á‡§µ‡§≤ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à ‡§î‡§∞ ‡§ë‡§°‡§ø‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡•â‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§")) {
      completeWithoutOtpMutation.mutate(orderId);
    }
  };


  const handleLogout = () => auth?.signOut().then(() => window.location.reload());

  const { assignedOrders, availableOrders, historyOrders, totalOrdersCount, pendingCount, deliveredCount, outForDeliveryCount } =
    useMemo(() => {
      const allOrders = orders || [];
      const myId = myDeliveryBoyId !== undefined && myDeliveryBoyId !== null ? Number(myDeliveryBoyId) : null; 

      const available = allOrders.filter((o: any) => {
        const status = (o.status ?? "").toLowerCase();
        const deliveryStatus = (o.deliveryStatus ?? "").toLowerCase(); 
        
        const isAvailable = (
            o.deliveryBoyId === null && 
            deliveryStatus === "pending" && 
            (status === "pending" || status === "ready_for_pickup") && 
            status !== "rejected" && 
            status !== "cancelled"
        );
        return isAvailable;
      });

      const assigned = allOrders.filter((o: any) => {
        const status = (o.status ?? "").toLowerCase();
        const deliveryStatus = (o.deliveryStatus ?? "").toLowerCase(); 
        
        const orderDeliveryBoyId = o.deliveryBoyId !== null && o.deliveryBoyId !== undefined ? Number(o.deliveryBoyId) : null;
        
        const isAssigned = (
          myId !== null && 
          orderDeliveryBoyId === myId && 
          deliveryStatus === "accepted" && 
          status !== "delivered" && 
          status !== "rejected" &&
          status !== "cancelled"
        );
        
        return isAssigned;
      });

      const history = allOrders.filter((o: any) => {
        const status = (o.status ?? "").toLowerCase();
        const isCompleted = status === "delivered" || status === "rejected" || status === "cancelled";
        if (isCompleted && dateFilter && o.createdAt) { 
            const orderDate = new Date(o.createdAt); orderDate.setHours(0,0,0,0);
            const filterDateMidnight = new Date(dateFilter); filterDateMidnight.setHours(0,0,0,0);
            return orderDate >= filterDateMidnight; 
        }
        return isCompleted; 
      });

      const total = allOrders.length;
      const pending = available.length;
      const delivered = history.filter((o: any) => (o.status ?? "").toLowerCase() === "delivered").length;
      const outForDelivery = assigned.filter((o: any) => (o.status ?? "").toLowerCase() === "out_for_delivery").length;

      return {
        assignedOrders: assigned,
        availableOrders: available,
        historyOrders: history,
        totalOrdersCount: total,
        pendingCount: pending,
        deliveredCount: delivered,
        outForDeliveryCount: outForDelivery,
      };
    }, [orders, dateFilter, myDeliveryBoyId]);

  if (isLoadingAuth || !isAuthenticated || !user || !socket || isLoading) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gray-50">
        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
        <p className="text-gray-500 mt-2">Connecting to server...</p>
      </div>
    ); 
  }
    
  return (
    <div className="min-h-screen bg-gray-50 font-inter text-gray-800">
      <header className="bg-white shadow-sm border-b rounded-b-lg">
        <div className="max-w-6xl mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center">
              <UserIcon className="w-5 h-5 text-white" />
            </div>
            <div>
              <h1 className="text-xl font-bold">‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°</h1>
              <p className="text-sm text-gray-600">‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à, {user?.name ?? '‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•â‡§Ø'}!</p>
            </div>
          </div>
        <div className="flex space-x-2">
            <Button variant="outline" onClick={handleLogout}>
              <LogOut className="w-4 h-4 mr-1" />
              ‡§≤‡•â‡§ó‡§Ü‡§â‡§ü
            </Button>
          </div>
        </div>
      </header>

      {/* Summary Cards */}
      <section className="max-w-6xl mx-auto px-4 py-8 grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6 flex items-center space-x-3">
            <Package className="w-8 h-8 text-blue-600" />
            <div>
              <p className="text-2xl font-bold">{totalOrdersCount}</p>
              <p className="text-sm text-gray-600">‡§ï‡•Å‡§≤ ‡§ë‡§∞‡•ç‡§°‡§∞</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6 flex items-center space-x-3">
            <Clock className="w-8 h-8 text-amber-600" />
            <div>
              <p className="text-2xl font-bold">{pendingCount}</p>
              <p className="text-sm text-gray-600">‡§≤‡§Ç‡§¨‡§ø‡§§ (‡§â‡§™‡§≤‡§¨‡•ç‡§ß)</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6 flex items-center space-x-3">
            <CheckCircle className="w-8 h-8 text-green-600" />
            <div>
              <p className="text-2xl font-bold">{deliveredCount}</p>
              <p className="text-sm text-gray-600">‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§π‡•Å‡§è</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6 flex items-center space-x-3">
            <Navigation className="w-8 h-8 text-purple-600" />
            <div>
              <p className="text-2xl font-bold">{outForDeliveryCount}</p>
              <p className="text-sm text-gray-600">‡§∞‡§æ‡§∏‡•ç‡§§‡•á ‡§Æ‡•á‡§Ç</p>
            </div>
          </CardContent>
        </Card>
      </section>

      {/* Tab Navigation & Date Filter */}
      <section className="max-w-6xl mx-auto px-4 pb-4">
        <div className="flex justify-between items-end mb-4 flex-wrap gap-4">
          <div className="flex space-x-2 border-b border-gray-200">
            <Button 
              variant={activeTab === 0 ? "default" : "outline"} 
              onClick={() => setActiveTab(0)}
              className={activeTab === 0 ? "bg-blue-600 text-white hover:bg-blue-700" : "hover:bg-gray-100"}
            >
              <Zap className="w-4 h-4 mr-2" />
              ‡§Ü‡§™‡§ï‡•á ‡§Ö‡§∏‡§æ‡§á‡§® ‡§ï‡§ø‡§è ‡§ó‡§è ({assignedOrders.length})
            </Button>
            <Button 
              variant={activeTab === 1 ? "default" : "outline"} 
              onClick={() => setActiveTab(1)}
              className={activeTab === 1 ? "bg-amber-600 text-white hover:bg-amber-700" : "hover:bg-gray-100"}
            >
              <Clock className="w-4 h-4 mr-2" />
              ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§ë‡§∞‡•ç‡§°‡§∞ ({availableOrders.length})
            </Button>
            <Button 
              variant={activeTab === 2 ? "default" : "outline"} 
              onClick={() => setActiveTab(2)}
              className={activeTab === 2 ? "bg-green-600 text-white hover:bg-green-700" : "hover:bg-gray-100"}
            >
              <CheckCircle className="w-4 h-4 mr-2" />
              ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§ï‡§ø‡§è ‡§ó‡§è / ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ({historyOrders.length})
            </Button>
          </div>

          {/* Date filter for history */}
          {activeTab === 2 && (
            <div className="flex items-center space-x-2">
              <Label htmlFor="date-filter" className="text-sm text-gray-600 whitespace-nowrap">‡§∏‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å:</Label>
              <div className="relative">
                <Input
                  id="date-filter"
                  type="date"
                  value={dateFilter ? format(dateFilter, "yyyy-MM-dd") : ""} 
                  onChange={(e) => setDateFilter(e.target.value ? new Date(e.target.value) : null)}
                  className="pl-8 w-40"
                />
                <Calendar className="absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              </div>
            </div>
          )}
        </div>
      </section>

      {/* Orders List */}
      <section className="max-w-6xl mx-auto px-4 pb-16 space-y-10">
        <h2 className="text-2xl font-bold mb-4">
          {activeTab === 0 && "‡§Ü‡§™‡§ï‡•á ‡§Ö‡§∏‡§æ‡§á‡§® ‡§ï‡§ø‡§è ‡§ó‡§è ‡§ë‡§∞‡•ç‡§°‡§∞"}
          {activeTab === 1 && "‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§™‡§ø‡§ï‡§Ö‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ë‡§∞‡•ç‡§°‡§∞"}
          {activeTab === 2 && `‡§™‡•Ç‡§∞‡•á ‡§π‡•Å‡§è/‡§ï‡•à‡§Ç‡§∏‡§≤ ‡§ë‡§∞‡•ç‡§°‡§∞ (‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§: ${dateFilter ? format(dateFilter, "dd MMM yyyy") : '‡§∏‡§≠‡•Ä'})`}
        </h2>

        {activeTab === 0 && (
          <OrdersListView 
            orders={assignedOrders} 
            title="‡§ï‡•ã‡§à ‡§Ö‡§∏‡§æ‡§á‡§® ‡§ï‡§ø‡§è ‡§ó‡§è ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç" 
            subtitle="‡§®‡§è ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§"
            myDeliveryBoyId={myDeliveryBoyId} 
            onAcceptOrder={(() => {}) as any} 
            onUpdateStatus={(order: any) => handleStatusProgress(order)}
            acceptLoading={false}
            updateLoading={updateStatusMutation.isPending}
            Button={Button} Card={Card} CardContent={CardContent} CardHeader={CardHeader} CardTitle={CardTitle} Badge={Badge}
            statusColor={getStatusColor} statusText={getStatusText} nextStatus={getNextStatus} nextStatusLabel={getNextStatusLabel}
          />
        )}

        {activeTab === 1 && (
          <OrdersListView 
            orders={availableOrders} 
            title="‡§ï‡•ã‡§à ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç" 
            subtitle="‡§®‡§è ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡•á‡§Ç‡•§"
            myDeliveryBoyId={myDeliveryBoyId} 
            onAcceptOrder={(id: number) => acceptOrderMutation.mutate(id)}
            onUpdateStatus={(() => {}) as any}
            acceptLoading={acceptOrderMutation.isPending}
            updateLoading={false} 
            Button={Button} Card={Card} CardContent={CardContent} CardHeader={CardHeader} CardTitle={CardTitle} Badge={Badge}
            statusColor={getStatusColor} statusText={getStatusText} nextStatus={getNextStatus} nextStatusLabel={getNextStatusLabel}
          />
        )}

        {activeTab === 2 && (
          <OrdersListView 
            orders={historyOrders} 
            title="‡§ï‡•ã‡§à ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç" 
            subtitle={`‡§ö‡•Å‡§®‡•Ä ‡§π‡•Å‡§à ‡§§‡§æ‡§∞‡•Ä‡§ñ‡§º (${format(dateFilter ?? new Date(), "dd MMM yyyy")}) ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡•ã‡§à ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§`}
            myDeliveryBoyId={myDeliveryBoyId} 
            onAcceptOrder={(() => {}) as any} 
            onUpdateStatus={(() => {}) as any}
            acceptLoading={false} 
            updateLoading={false}
            Button={Button} Card={Card} CardContent={CardContent} CardHeader={CardHeader} CardTitle={CardTitle} Badge={Badge}
            statusColor={getStatusColor} statusText={getStatusText} nextStatus={getNextStatus} nextStatusLabel={getNextStatusLabel}
          />
        )}
      </section>

    {/* OTP Dialog */}
    
{otpDialogOpen && selectedOrder && (
  <DeliveryOtpDialog
    isOpen={otpDialogOpen}
    onOpenChange={setOtpDialogOpen}
    order={selectedOrder}
    
    // ‚úÖ 1. OTP Confirm ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è: handleOtpSubmitMutation ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
    onConfirm={async (otp: string) => {
      // ‡§∏‡•Ä‡§ß‡•á mutation hook ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§
      // handleOtpSubmitMutation ‡§ï‡•á onSuccess/onError toast ‡§î‡§∞ state ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡•ã ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§§‡•á ‡§π‡•à‡§Ç‡•§
      if (selectedOrder?.id) {
        handleOtpSubmitMutation.mutate({ orderId: selectedOrder.id, otp });
      }
    }}
    // ‚úÖ isSubmitting ‡§ï‡•ã mutation hook ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§∏‡•á ‡§¨‡§æ‡§Ç‡§ß‡•á‡§Ç
    isSubmitting={handleOtpSubmitMutation.isPending} 
    // ‚úÖ error ‡§ï‡•ã mutation hook ‡§∏‡•á ‡§≤‡•á‡§Ç (‡§Ø‡§ænull ‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à)
    error={handleOtpSubmitMutation.error ? handleOtpSubmitMutation.error.message : null} 

    // ‚úÖ 2. Manual OTP ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è: sendOtpToCustomerMutation ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
    onSendManualOtp={async () => {
      // ‡§∏‡•Ä‡§ß‡•á mutation hook ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§
      // sendOtpToCustomerMutation ‡§ï‡•á onSuccess/onError toast ‡§î‡§∞ state ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡•ã ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§§‡•á ‡§π‡•à‡§Ç‡•§
      if (selectedOrder?.id) {
        sendOtpToCustomerMutation.mutate(selectedOrder.id);
      }
    }}
    // ‚úÖ isSendingManualOtp ‡§ï‡•ã mutation hook ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§∏‡•á ‡§¨‡§æ‡§Ç‡§ß‡•á‡§Ç
    isSendingManualOtp={sendOtpToCustomerMutation.isPending}

    // ‚úÖ 3. ‡§¨‡§ø‡§®‡§æ OTP ‡§ï‡•á ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è: completeWithoutOtpMutation ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
    onCompleteWithoutOtp={async () => {
      // ‡§∏‡•Ä‡§ß‡•á mutation hook ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§
      // completeWithoutOtpMutation ‡§ï‡•á onSuccess/onError toast ‡§î‡§∞ state ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡•ã ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§§‡•á ‡§π‡•à‡§Ç‡•§
      if (selectedOrder?.id) {
        if (window.confirm("‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§µ‡§æ‡§ï‡§à ‡§á‡§∏ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•ã ‡§¨‡§ø‡§®‡§æ OTP ‡§ï‡•á ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? ‡§Ø‡§π ‡§ï‡•á‡§µ‡§≤ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à ‡§î‡§∞ ‡§ë‡§°‡§ø‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡•â‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§")) {
          completeWithoutOtpMutation.mutate(selectedOrder.id);
        }
      }
    }}
    // ‚úÖ isCompletingWithoutOtp ‡§™‡•ç‡§∞‡•â‡§™ ‡§ï‡•ã mutation hook ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§∏‡•á ‡§¨‡§æ‡§Ç‡§ß‡•á‡§Ç
    isCompletingWithoutOtp={completeWithoutOtpMutation.isPending}
  />
)}
</div> 
    );
}

      
// --- Helper Component for Orders List ---
interface OrdersListViewProps {
  orders: any[];
  title: string;
  subtitle?: string;
  myDeliveryBoyId: number | null | undefined;
  onAcceptOrder: (orderId: number) => void;
  onUpdateStatus: (order: any) => void; // Changed from (orderId: string, status: string) to (order: any)
  acceptLoading: boolean;
  updateLoading: boolean;
  Button: React.ElementType;
  Card: React.ElementType;
  CardContent: React.ElementType;
  CardHeader: React.ElementType;
  CardTitle: React.ElementType;
  Badge: React.ElementType;
  statusColor: (status: string) => string;
  statusText: (status: string) => string;
  nextStatus: (status: string) => string | null; // Can return null
  nextStatusLabel: (status: string) => string;
}

const OrdersListView: React.FC<OrdersListViewProps> = ({ 
  orders, 
  title, 
  subtitle, 
  myDeliveryBoyId, 
  onAcceptOrder, 
  onUpdateStatus, 
  acceptLoading, 
  updateLoading, 
  Button, 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle, 
  Badge, 
  statusColor, 
  statusText, 
  nextStatus, 
  nextStatusLabel,
}) => {
  return (
    <>
      {orders.length === 0 ? (
        <Card>
          <CardContent className="py-12 text-center">
            <Package className="mx-auto h-12 w-12 text-gray-400 mb-4" />
            <h3 className="text-lg font-medium mb-2">{title}</h3>
            <p className="text-gray-600">{subtitle}</p>
          </CardContent>
        </Card>
      ) : (
        <DeliveryOrdersList
          orders={orders}
          onAcceptOrder={onAcceptOrder}
          onUpdateStatus={onUpdateStatus}
          acceptLoading={acceptLoading}
          updateLoading={updateLoading}
          Button={Button} Card={Card} CardContent={CardContent} CardHeader={CardHeader}
          CardTitle={CardTitle} Badge={Badge} statusColor={statusColor}
          statusText={statusText} nextStatus={nextStatus} nextStatusLabel={nextStatusLabel}
        />
      )}
    </>
  );
};
