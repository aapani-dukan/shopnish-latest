import React, { useState, useEffect, useMemo } from "react";
import { useMutation, useQueryClient, useQuery } from "@tanstack/react-query";

import {
  User,
  LogOut,
  Package,
  Clock,
  CheckCircle,
  Navigation,
  Loader2,
  Calendar, // ‡§®‡§Ø‡§æ: ‡§°‡•á‡§ü ‡§™‡§ø‡§ï‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è
  Zap,     // ‡§®‡§Ø‡§æ: ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è
} from "lucide-react";

// ‡§°‡•á‡§ü ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è
import { format } from "date-fns"; 

// helper components & hooks
import DeliveryOtpDialog from "./DeliveryOtpDialog";
import DeliveryOrdersList from "./DeliveryOrdersList";
import { useAuth } from "../hooks/useAuth";
import { useSocket } from "../hooks/useSocket";
import { apiRequest } from "../lib/queryClient";
import api from "../lib/api";
import { Card, CardHeader, CardTitle, CardContent } from "../components/ui/card";
import { Badge } from "../components/ui/badge";
import { Button } from "../components/ui/button";
import { useToast } from "../hooks/use-toast";
import { Label } from "../components/ui/label"; // Label ‡§ï‡§Ç‡§™‡•ã‡§®‡•á‡§Ç‡§ü
import { Input } from "../components/ui/input"; // Input ‡§ï‡§Ç‡§™‡•ã‡§®‡•á‡§Ç‡§ü (‡§°‡•á‡§ü ‡§™‡§ø‡§ï‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è)


// --- utility functions ---
// **COLORING IMPROVEMENT:**
const statusColor = (status: string) => {
  switch (status) {
    case "pending": // Available / New Order
      return "bg-amber-600 hover:bg-amber-700";
    case "accepted": // Assigned / In Progress
      return "bg-blue-600 hover:bg-blue-700";
    case "picked_up":
      return "bg-indigo-600 hover:bg-indigo-700";
    case "out_for_delivery":
      return "bg-purple-600 hover:bg-purple-700";
    case "delivered":
      return "bg-green-600 hover:bg-green-700";
    case "rejected":
    case "cancelled":
      return "bg-red-500 hover:bg-red-600";
    default:
      return "bg-gray-500 hover:bg-gray-600";
  }
};

const statusText = (status: string) => {
  switch (status) {
    case "pending":
      return "‡§≤‡§Ç‡§¨‡§ø‡§§";
    case "accepted":
      return "‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ (‡§Ö‡§∏‡§æ‡§á‡§®)";
    case "preparing":
      return "‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à";
    case "ready_for_pickup":
      return "‡§™‡§ø‡§ï‡§Ö‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞";
    case "picked_up":
      return "‡§™‡§ø‡§ï‡§Ö‡§™ ‡§π‡•ã ‡§ó‡§Ø‡§æ";
    case "out_for_delivery":
      return "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§ï‡§≤‡§æ";
    case "delivered":
      return "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ";
    case "rejected":
      return "‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§";
    case "cancelled":
      return "‡§∞‡§¶‡•ç‡§¶";
    default:
      return status || "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§";
  }
};

const nextStatus = (current: string) => {
  switch (current) {
    case "pending": return "accepted"; // pending order ‡§ï‡•ã accept ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
    case "accepted": return "picked_up";
    case "picked_up": return "out_for_delivery";
    case "out_for_delivery": return null; // <--- ‡§Ø‡§π ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§π‡•à‡•§
    default: return null;
  }
};


const nextStatusLabel = (status: string) => {
  switch (status) {
    case "ready_for_pickup":
      return "‡§™‡§ø‡§ï‡§Ö‡§™ ‡§π‡•ã ‡§ó‡§Ø‡§æ";
    case "picked_up":
      return "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§ï‡§≤‡§æ";
    case "out_for_delivery":
      return "OTP ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§ï‡§∞‡•á‡§Ç";
    default:
      return "";
  }
};

// --- main component ---
export default function DeliveryDashboard() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { user, auth, isLoadingAuth, isAuthenticated } = useAuth();
  const rawSocket = useSocket() as any;
  const socket = rawSocket?.socket ?? rawSocket;

  const [selectedOrder, setSelectedOrder] = useState(null);
  const [otp, setOtp] = useState("");
  const [otpDialogOpen, setOtpDialogOpen] = useState(false);
  
  // *** ‡§®‡§Ø‡§æ ‡§∏‡•ç‡§ü‡•á‡§ü: ‡§è‡§ï‡•ç‡§ü‡§ø‡§µ ‡§ü‡•à‡§¨ (0: Assigned, 1: Available, 2: History) ***
  const [activeTab, setActiveTab] = useState(0); 
  
  // *** ‡§®‡§Ø‡§æ ‡§∏‡•ç‡§ü‡•á‡§ü: ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡•á‡§ü ‡§™‡§ø‡§ï‡§∞ ***
  const [dateFilter, setDateFilter] = useState<Date | null>(() => {
    const fiveDaysAgo = new Date();
    fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);
    return fiveDaysAgo; // ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á 5 ‡§¶‡§ø‡§® ‡§™‡§π‡§≤‡•á ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ
  });
  
  useEffect(() => {
    if (!user || !auth?.currentUser) return;
    try {
      // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø deliveryBoyId ‡§∏‡§π‡•Ä ‡§¢‡§Ç‡§ó ‡§∏‡•á ‡§∏‡•á‡§ü ‡§π‡•à
      const deliveryBoyId = user?.deliveryBoyId;
      if (deliveryBoyId !== undefined) {
        const deliveryBoyUser = { ...user, deliveryBoyId };
        sessionStorage.setItem("deliveryBoyUser", JSON.stringify(deliveryBoyUser));
        // setuser(deliveryBoyUser); // setuser ‡§ï‡•Ä ‡§Ø‡§π‡§æ‡§Å ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è, useAuth ‡§∏‡•á ‡§Ü‡§§‡§æ ‡§π‡•à
      }
    } catch (err) {
      console.error("delivery boy session store error:", err);
    }
  }, [user, auth?.currentUser]); // Removed setuser from dependencies as it may cause infinite loop

  const getValidToken = async () => {
    if (!auth?.currentUser) return null;
    try {
      return await auth.currentUser.getIdToken(true);
    } catch (err) {
      console.error("‡§ü‡•ã‡§ï‡§® ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:", err);
      return null;
    }
  };

  const { data: orders = [], isLoading } = useQuery({
    queryKey: ["deliveryOrders"],
    queryFn: async () => {
      try {
        const [availableRes, myRes] = await Promise.allSettled([
          apiRequest("get", "/api/delivery/orders/available"),
          apiRequest("get", "/api/delivery/orders/my"),
        ]);
        const availableOrders =
          availableRes.status === "fulfilled" && Array.isArray((availableRes.value as any).orders)
            ? (availableRes.value as any).orders
            : [];
        const myOrders =
          myRes.status === "fulfilled" && Array.isArray((myRes.value as any).orders)
            ? (myRes.value as any).orders
            : [];
        const map = new Map();
        [...availableOrders, ...myOrders].forEach((o) => {
          if (o && typeof o.id === "number") {
            map.set(o.id, {
              ...o,
              isMine: Number(o.deliveryBoyId) === Number(user?.deliveryBoyId),
            });
          }
        });
        return Array.from(map.values());
      } catch (err) {
        console.error("‡§ë‡§∞‡•ç‡§°‡§∞ ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:", err);
        toast({
          title: "‡§°‡•á‡§ü‡§æ ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
          description: "‡§ë‡§∞‡•ç‡§°‡§∞ ‡§≤‡§æ‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§ï‡•ã‡§à ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à",
          variant: "destructive",
        });
        return [];
      }
    },
    enabled: isAuthenticated && !!user,
  });

  useEffect(() => {
    if (!socket || !user) return;
    const onOrdersChanged = () => queryClient.invalidateQueries({ queryKey: ["deliveryOrders"] });
    if (socket.emit) socket.emit("register-client", { role: "delivery", userId: user.uid ?? user.id });
    if (socket.on) {
      socket.on("delivery:orders-changed", onOrdersChanged);
      socket.on("new-order", onOrdersChanged);
      socket.on("order:update", onOrdersChanged);
    }
    return () => {
      if (socket.off) {
        socket.off("delivery:orders-changed", onOrdersChanged);
        socket.off("new-order", onOrdersChanged);
        socket.off("order:update", onOrdersChanged);
      }
    };
  }, [socket, user, queryClient, isAuthenticated]);

  // gps ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§≤‡•â‡§ú‡§ø‡§ï
  useEffect(() => {
    if (!socket || !user || isLoading) return;

    let watchId: number | null = null;
    let intervalId: NodeJS.Timeout | null = null;

    const activeOrder = orders.find((o: any) =>
      (o.deliveryStatus ?? "").toLowerCase() === "accepted" &&
      (o.status === "picked_up" || o.status === "out_for_delivery")
    );

    if (activeOrder && navigator.geolocation) {
      console.log(`üì° Starting GPS tracking for order ${activeOrder.id}`);

      const sendLocation = (position: GeolocationPosition) => {
        const { latitude, longitude } = position.coords;

        socket.emit("deliveryboy:location_update", {
          orderId: activeOrder.id,
          lat: latitude,
          lng: longitude,
          timestamp: new Date().toISOString()
        });
        console.log(`EMIT: ${latitude}, ${longitude}`);
      };

      watchId = navigator.geolocation.watchPosition(
        (position) => {
          sendLocation(position);

          if (!intervalId) {
            intervalId = setInterval(() => {
              // (previous logic for latest position)
            }, 10000);
          }
        },
        (error) => {
          console.error("‚ùå Geolocation error:", error.message);
          if (error.code === error.PERMISSION_DENIED) {
            toast({
              title: "GPS ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï",
              description: "‡§∞‡§ø‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§•‡§æ‡§® (Location) ‡§™‡§π‡•Å‡§Å‡§ö ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç‡•§",
              variant: "destructive",
            });
          }
        },
        {
          enableHighAccuracy: true,
          timeout: 5000,
          maximumAge: 0,
        }
      );
    }

    return () => {
      if (watchId !== null) {
        navigator.geolocation.clearWatch(watchId);
        console.log("üõë GPS tracking stopped.");
      }
      if (intervalId !== null) {
        clearInterval(intervalId);
      }
    };
  }, [orders, socket, user, isLoading]);

  const acceptOrderMutation = useMutation({
    mutationFn: (orderId: number) => api.post("/api/delivery/accept", { orderId }),
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ["deliveryOrders"] }),
    onError: () => toast({ title: "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø", description: "‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤", variant: "destructive" }),
  });

  const updateStatusMutation = useMutation({
    mutationFn: ({ orderId, newStatus }: { orderId: number; newStatus: string }) =>
      api.patch(`/api/delivery/orders/${orderId}/status`, { newStatus }),
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ["deliveryOrders"] }),
    onError: () => toast({ title: "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø", description: "‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤", variant: "destructive" }),
  });

  const handleOtpSubmitMutation = useMutation({
    mutationFn: async ({ orderId, otp }: { orderId: number; otp: string }) => {
      const token = await getValidToken();
      if (!token) throw new Error("‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ø‡§æ ‡§™‡•Å‡§∞‡§æ‡§®‡§æ ‡§ü‡•ã‡§ï‡§®");
      const API_BASE = import.meta.env.VITE_API_BASE_URL || "https://shopnish-00ug.onrender.com";
      const response = await fetch(`${API_BASE}/api/delivery/orders/${orderId}/complete-delivery`, {
        method: "POST",
        headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
        body: JSON.stringify({ otp }),
      });
      if (response.status === 401) {
        throw new Error("OTP ‡§ó‡§≤‡§§ ‡§π‡•à‡•§");
      }
      if (!response.ok) throw new Error("‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤");
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["deliveryOrders"] });
      toast({ title: "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§π‡•Å‡§à", description: "‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§", variant: "success" });
      setOtpDialogOpen(false);
      setOtp("");
      setSelectedOrder(null);
    },
    onError: (error: any) => {
      console.error("‚ùå Mutation failed with error:", error);
      toast({ title: "OTP ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø", description: error.message || "OTP ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§", variant: "destructive" });
    },
  });

  // ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•ã OTP ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•ç‡§Ø‡•Ç‡§ü‡•á‡§∂‡§®
  const sendOtpToCustomerMutation = useMutation({
    mutationFn: async (orderId: number) => {
      const token = await getValidToken();
      if (!token) throw new Error("‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ø‡§æ ‡§™‡•Å‡§∞‡§æ‡§®‡§æ ‡§ü‡•ã‡§ï‡§®");
      const API_BASE = import.meta.env.VITE_API_BASE_URL || "https://shopnish-00ug.onrender.com";
      const response = await fetch(`${API_BASE}/api/delivery/send-otp-to-customer`, {
        method: "POST",
        headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
        body: JSON.stringify({ orderId }),
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•ã OTP ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤");
      }
      return response.json();
    },
    onSuccess: () => {
      toast({ title: "OTP ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ", description: "‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•ã WhatsApp ‡§™‡§∞ OTP ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§", variant: "success" });
      queryClient.invalidateQueries({ queryKey: ["deliveryOrders"] });
    },
    onError: (error: any) => {
      console.error("‚ùå Failed to send OTP:", error);
      toast({ title: "OTP ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤", description: error.message || "‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§", variant: "destructive" });
    },
  });

  // *** OTP ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï (‡§ú‡•à‡§∏‡§æ ‡§ï‡§ø ‡§π‡§Æ‡§®‡•á ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç ‡§§‡§Ø ‡§ï‡§ø‡§Ø‡§æ) ***
  const handleStatusProgress = (order: any) => {
    console.log("üîç Checking order:", order.id, "Current status:", order.status);
    const curStatus = (order.status ?? "").toLowerCase().trim();
    console.log("üîç Trimmed and lowercased status:", curStatus);

    // OTP ‡§°‡§æ‡§Ø‡§≤‡•â‡§ó ‡§§‡§≠‡•Ä ‡§ñ‡•Å‡§≤‡•á‡§ó‡§æ ‡§ú‡§¨ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ 'out_for_delivery' ‡§π‡•ã
    if (curStatus === "out_for_delivery") {
      console.log("‚úÖ Status is 'out_for_delivery'. Opening OTP dialog.");
      setSelectedOrder(order);
      setOtpDialogOpen(true);
      // 'return;' ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à
    }

    const next = nextStatus(curStatus);
    
    // *** ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§Ø‡§π‡§æ‡§Å: 'accepted' ‡§ï‡•á ‡§≤‡§ø‡§è updateStatusMutation ‡§ï‡•ã ‡§¨‡§æ‡§Ø‡§™‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç ***
    if (next === "accepted") {
        console.log(`‚ö†Ô∏è Status is 'pending'. Order should be accepted via 'onAcceptOrder' prop.`);
        // ‡§á‡§∏ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§Ö‡§™‡§°‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
        // ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø 'availableOrders' ‡§ü‡•à‡§¨ ‡§Æ‡•á‡§Ç 'Accept Order' ‡§¨‡§ü‡§® 'acceptOrderMutation' ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
        return; 
    }

    if (next) { // ‡§Ø‡§¶‡§ø 'next' ‡§Ö‡§≠‡•Ä ‡§≠‡•Ä valid (e.g., picked_up, out_for_delivery)
      console.log(`‚û°Ô∏è Status is not 'out_for_delivery'. Updating to next status: ${next}`);

      // ‡§Ø‡§¶‡§ø ‡§Ö‡§ó‡§≤‡§æ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ 'out_for_delivery' ‡§π‡•à, ‡§§‡•ã OTP ‡§≠‡•á‡§ú‡•á‡§Ç
      if (next === "out_for_delivery" && curStatus !== "out_for_delivery") {
        console.log(`‚û°Ô∏è Detected transition to 'out_for_delivery'. Sending OTP for order ${order.id}.`);
        sendOtpToCustomerMutation.mutate(order.id);
      }

      updateStatusMutation.mutate({ orderId: order.id, newStatus: next });
    } else {
        console.log(`ü§∑ No next status defined for current status: ${curStatus}. This is expected for 'out_for_delivery' status.`);
    }
  };

  const handleOtpConfirmation = () => {
    if (!selectedOrder || otp.trim().length !== 6) {
      toast({ title: "OTP ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç", description: "6-‡§Ö‡§Ç‡§ï‡•ã‡§Ç ‡§ï‡§æ OTP ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§", variant: "destructive" });
      return;
    }
    handleOtpSubmitMutation.mutate({ orderId: selectedOrder.id, otp });
  };

  const handleLogout = () => auth?.signOut().then(() => window.location.reload());

  const myDeliveryBoyId = user?.deliveryBoyId;
  
  // ** UPDATED useMemo FOR FILTERING **
  const { assignedOrders, availableOrders, historyOrders, totalOrdersCount, pendingCount, deliveredCount, outForDeliveryCount } =
    useMemo(() => {
      const allOrders = orders || []; // ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è

      // 1. Available Orders: ‡§µ‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ú‡•ã ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•ã ‡§Ö‡§∏‡§æ‡§á‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§è ‡§π‡•à‡§Ç
      // ‡§î‡§∞ ‡§ú‡•ã 'pending' ‡§Ø‡§æ 'ready_for_pickup' ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç‡•§
      const available = allOrders.filter((o: any) => {
        const status = (o.status ?? "").toLowerCase();
        const deliveryStatus = (o.deliveryStatus ?? "").toLowerCase();

        return (
          o.deliveryBoyId === null && // <-- ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£: ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•ã ‡§Ö‡§∏‡§æ‡§á‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à
          deliveryStatus === "pending" && 
          (status === "pending" || status === "ready_for_pickup") && // <-- ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§≠‡•Ä ‡§∏‡§π‡•Ä ‡§π‡•à
          status !== "rejected" && 
          status !== "cancelled"
        );
      });

      // 2. Assigned Orders: ‡§µ‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ú‡•ã ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•â‡§Ø ‡§ï‡•ã ‡§Ö‡§∏‡§æ‡§á‡§® ‡§ï‡§ø‡§è ‡§ó‡§è ‡§π‡•à‡§Ç
      // ‡§î‡§∞ ‡§ú‡•ã ‡§Ö‡§≠‡•Ä 'delivered', 'rejected' ‡§Ø‡§æ 'cancelled' ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§è ‡§π‡•à‡§Ç‡•§
      const assigned = allOrders.filter((o: any) => {
        const status = (o.status ?? "").toLowerCase();
        const deliveryStatus = (o.deliveryStatus ?? "").toLowerCase(); 
        
        return (
          Number(o.deliveryBoyId) === Number(myDeliveryBoyId) && // <-- ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£: ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® DB ‡§ï‡•ã ‡§Ö‡§∏‡§æ‡§á‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è
          deliveryStatus === "accepted" && 
          status !== "delivered" && 
          status !== "rejected" &&
          status !== "cancelled"
        );
      });

      // 3. History Orders: Delivered, Rejected, or Cancelled (dateFilter ‡§ï‡•á ‡§∏‡§æ‡§•)
      const history = allOrders.filter((o: any) => {
        const status = (o.status ?? "").toLowerCase();
        const isCompleted = status === "delivered" || status === "rejected" || status === "cancelled";
        
        if (isCompleted && dateFilter && o.createdAt) { 
            const orderDate = new Date(o.createdAt);
            orderDate.setHours(0, 0, 0, 0); // ‡§∏‡§Æ‡§Ø ‡§ï‡•ã ‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø ‡§™‡§∞ ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
            const filterDateMidnight = new Date(dateFilter);
            filterDateMidnight.setHours(0, 0, 0, 0); // ‡§∏‡§Æ‡§Ø ‡§ï‡•ã ‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø ‡§™‡§∞ ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
            return orderDate >= filterDateMidnight; 
        }

        return isCompleted; 
      });
      
      const total = allOrders.length;
      const pending = available.length;
      // ‡§ï‡§æ‡§â‡§Ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡•Ä ‡§ó‡§à ‡§≤‡§ø‡§∏‡•ç‡§ü‡•ç‡§∏ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
      const delivered = history.filter((o: any) => (o.status ?? "").toLowerCase() === "delivered").length;
      const outForDelivery = assigned.filter((o: any) => (o.status ?? "").toLowerCase() === "out_for_delivery").length;

      return {
        assignedOrders: assigned,
        availableOrders: available,
        historyOrders: history,
        totalOrdersCount: total,
        pendingCount: pending,
        deliveredCount: delivered,
        outForDeliveryCount: outForDelivery,
      };
    }, [orders, dateFilter, myDeliveryBoyId]); // dependencies ‡§∏‡§π‡•Ä ‡§π‡•à‡§Ç



  if (isLoadingAuth || !isAuthenticated || !user || !socket || isLoading) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gray-50">
        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
        <p className="text-gray-500 mt-2">Connecting to server...</p>
      </div>
    );
  }

  // --- main render ---
  return (
    <div className="min-h-screen bg-gray-50 font-inter text-gray-800">
      <header className="bg-white shadow-sm border-b rounded-b-lg">
        <div className="max-w-6xl mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center">
              <User className="w-5 h-5 text-white" />
            </div>
            <div>
              <h1 className="text-xl font-bold">‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°</h1>
              <p className="text-sm text-gray-600">‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à, {user?.name ?? '‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•â‡§Ø'}!</p>
            </div>
          </div>
          <div className="flex space-x-2">
            <Button variant="outline" onClick={handleLogout}>
              <LogOut className="w-4 h-4 mr-1" />
              ‡§≤‡•â‡§ó‡§Ü‡§â‡§ü
            </Button>
          </div>
        </div>
      </header>

      {/* summary cards */}
      <section className="max-w-6xl mx-auto px-4 py-8 grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6 flex items-center space-x-3">
            <Package className="w-8 h-8 text-blue-600" />
            <div>
              <p className="text-2xl font-bold">{totalOrdersCount}</p>
              <p className="text-sm text-gray-600">‡§ï‡•Å‡§≤ ‡§ë‡§∞‡•ç‡§°‡§∞</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6 flex items-center space-x-3">
            <Clock className="w-8 h-8 text-amber-600" /> {/* Changed to amber for pending */}
            <div>
              <p className="text-2xl font-bold">{pendingCount}</p>
              <p className="text-sm text-gray-600">‡§≤‡§Ç‡§¨‡§ø‡§§ (‡§â‡§™‡§≤‡§¨‡•ç‡§ß)</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6 flex items-center space-x-3">
            <CheckCircle className="w-8 h-8 text-green-600" />
            <div>
              <p className="text-2xl font-bold">{deliveredCount}</p>
              <p className="text-sm text-gray-600">‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§π‡•Å‡§è</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6 flex items-center space-x-3">
            <Navigation className="w-8 h-8 text-purple-600" />
            <div>
              <p className="text-2xl font-bold">{outForDeliveryCount}</p>
              <p className="text-sm text-gray-600">‡§∞‡§æ‡§∏‡•ç‡§§‡•á ‡§Æ‡•á‡§Ç</p>
            </div>
          </CardContent>
        </Card>
      </section>
      
      {/* ---------------------------------------------------- */}
      {/* *** NEW TAB NAVIGATION & ORDER FILTERING SECTION *** */}
      {/* ---------------------------------------------------- */}
      <section className="max-w-6xl mx-auto px-4 pb-4">
        <div className="flex justify-between items-end mb-4 flex-wrap gap-4">
            <div className="flex space-x-2 border-b border-gray-200">
                <Button 
                    variant={activeTab === 0 ? "default" : "outline"} 
                    onClick={() => setActiveTab(0)}
                    className={activeTab === 0 ? "bg-blue-600 text-white hover:bg-blue-700" : "hover:bg-gray-100"}
                >
                    <Zap className="w-4 h-4 mr-2" />
                    ‡§Ü‡§™‡§ï‡•á ‡§Ö‡§∏‡§æ‡§á‡§® ‡§ï‡§ø‡§è ‡§ó‡§è ({assignedOrders.length})
                </Button>
                <Button 
                    variant={activeTab === 1 ? "default" : "outline"} 
                    onClick={() => setActiveTab(1)}
                    className={activeTab === 1 ? "bg-amber-600 text-white hover:bg-amber-700" : "hover:bg-gray-100"}
                >
                    <Clock className="w-4 h-4 mr-2" />
                    ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§ë‡§∞‡•ç‡§°‡§∞ ({availableOrders.length})
                </Button>
                <Button 
                    variant={activeTab === 2 ? "default" : "outline"} 
                    onClick={() => setActiveTab(2)}
                    className={activeTab === 2 ? "bg-green-600 text-white hover:bg-green-700" : "hover:bg-gray-100"}
                >
                    <CheckCircle className="w-4 h-4 mr-2" />
                    ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§ï‡§ø‡§è ‡§ó‡§è / ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ({historyOrders.length})
                </Button>
            </div>
            
            {/* Date Filter for History Tab */}
            {activeTab === 2 && (
                <div className="flex items-center space-x-2">
                    <Label htmlFor="date-filter" className="text-sm text-gray-600 whitespace-nowrap">
                        ‡§∏‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å:
                    </Label>
                    <div className="relative">
                        <Input
                            id="date-filter"
                            type="date"
                            value={dateFilter ? format(dateFilter, "yyyy-MM-dd") : ""}
                            onChange={(e) => setDateFilter(e.target.value ? new Date(e.target.value) : null)}
                            className="pl-8 w-40"
                        />
                        <Calendar className="absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    </div>
                </div>
            )}
        </div>
      </section>

      {/* orders list */}
      {/* orders list */}
      <section className="max-w-6xl mx-auto px-4 pb-16 space-y-10">
        <h2 className="text-2xl font-bold mb-4">
            {activeTab === 0 && "‡§Ü‡§™‡§ï‡•á ‡§Ö‡§∏‡§æ‡§á‡§® ‡§ï‡§ø‡§è ‡§ó‡§è ‡§ë‡§∞‡•ç‡§°‡§∞"}
            {activeTab === 1 && "‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§™‡§ø‡§ï‡§Ö‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ë‡§∞‡•ç‡§°‡§∞"}
            {activeTab === 2 && `‡§™‡•Ç‡§∞‡•á ‡§π‡•Å‡§è/‡§ï‡•à‡§Ç‡§∏‡§≤ ‡§ë‡§∞‡•ç‡§°‡§∞ (‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§: ${dateFilter ? format(dateFilter, "dd MMM yyyy") : '‡§∏‡§≠‡•Ä'})`}
        </h2>
        
        {/* Render List based on Active Tab */}
        {activeTab === 0 && (
            <OrdersListView 
                orders={assignedOrders} 
                title="‡§ï‡•ã‡§à ‡§Ö‡§∏‡§æ‡§á‡§® ‡§ï‡§ø‡§è ‡§ó‡§è ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç" 
                subtitle="‡§®‡§è ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§"
                myDeliveryBoyId={myDeliveryBoyId} 
                // Props for DeliveryOrdersList
                onAcceptOrder={(() => {}) as any} 
                onUpdateStatus={(order: any) => handleStatusProgress(order)}
                acceptLoading={false}
                updateLoading={updateStatusMutation.isPending}
                Button={Button} Card={Card} CardContent={CardContent} CardHeader={CardHeader} CardTitle={CardTitle} Badge={Badge}
                statusColor={statusColor} statusText={statusText} nextStatus={nextStatus} nextStatusLabel={nextStatusLabel}
            />
        )}
        
        {activeTab === 1 && (
            <OrdersListView 
                orders={availableOrders} 
                title="‡§ï‡•ã‡§à ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç" 
                subtitle="‡§®‡§è ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡•á‡§Ç‡•§"
                myDeliveryBoyId={myDeliveryBoyId} 
                // Props for DeliveryOrdersList
                onAcceptOrder={(id: number) => acceptOrderMutation.mutate(id)}
                onUpdateStatus={(() => {}) as any}
                acceptLoading={acceptOrderMutation.isPending}
                updateLoading={false} 
                Button={Button} Card={Card} CardContent={CardContent} CardHeader={CardHeader} CardTitle={CardTitle} Badge={Badge}
                statusColor={statusColor} statusText={statusText} nextStatus={nextStatus} nextStatusLabel={nextStatusLabel}
            />
        )}
        
        {activeTab === 2 && (
            <OrdersListView 
                orders={historyOrders} 
                title="‡§ï‡•ã‡§à ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç" 
                subtitle={`‡§ö‡•Å‡§®‡•Ä ‡§π‡•Å‡§à ‡§§‡§æ‡§∞‡•Ä‡§ñ‡§º (${format(dateFilter ?? new Date(), "dd MMM yyyy")}) ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡•ã‡§à ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§`}
                myDeliveryBoyId={myDeliveryBoyId} 
                // History tab ‡§Æ‡•á‡§Ç, ‡§π‡§Æ Accept ‡§Ø‡§æ Update ‡§¨‡§ü‡§® ‡§ï‡•ã ‡§õ‡•Å‡§™‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
                onAcceptOrder={(() => {}) as any} 
                onUpdateStatus={(() => {}) as any}
                acceptLoading={false} 
                updateLoading={false}
                Button={Button} Card={Card} CardContent={CardContent} CardHeader={CardHeader} CardTitle={CardTitle} Badge={Badge}
                statusColor={statusColor} statusText={statusText} nextStatus={nextStatus} nextStatusLabel={nextStatusLabel}
            />
        )}
      </section>


      {/* OTP Dialog */}
      <DeliveryOtpDialog
        open={otpDialogOpen}
        onOpenChange={setOtpDialogOpen}
        otp={otp}
        setOtp={setOtp}
        onConfirm={handleOtpConfirmation}
        isLoading={handleOtpSubmitMutation.isPending}
        orderNumber={selectedOrder?.orderNumber}
      />
    </div>
  );
}

// Helper Component for List View (‡§ï‡•ã‡§° ‡§õ‡•ã‡§ü‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è)
const OrdersListView: React.FC<any> = ({ orders, title, subtitle, ...props }) => (
    <>
        {orders.length === 0 ? (
            <Card>
                <CardContent className="py-12 text-center">
                    <Package className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                    <h3 className="text-lg font-medium mb-2">{title}</h3>
                    <p className="text-gray-600">{subtitle}</p>
                </CardContent>
            </Card>
        ) : (
            <DeliveryOrdersList
                orders={orders}
                onAcceptOrder={props.onAcceptOrder} 
                onUpdateStatus={props.onUpdateStatus} 
                acceptLoading={props.acceptLoading}
                updateLoading={props.updateLoading}
                // ‡§¨‡§æ‡§ï‡•Ä UI ‡§ï‡§Ç‡§™‡•ã‡§®‡•á‡§Ç‡§ü‡•ç‡§∏ ‡§î‡§∞ ‡§Ø‡•Ç‡§ü‡§ø‡§≤‡§ø‡§ü‡•Ä ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§Ç‡§∏ ‡§∏‡•Ä‡§ß‡•á props ‡§∏‡•á ‡§™‡§æ‡§∏ ‡§π‡•ã ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç
                Button={props.Button} Card={props.Card} CardContent={props.CardContent} CardHeader={props.CardHeader} 
                CardTitle={props.CardTitle} Badge={props.Badge} statusColor={props.statusColor} 
                statusText={props.statusText} nextStatus={props.nextStatus} nextStatusLabel={props.nextStatusLabel}
            />
        )}
    </>
);