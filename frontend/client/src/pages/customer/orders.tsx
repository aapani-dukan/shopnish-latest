// client/src/pages/customerorderspage.tsx
import React, { useEffect } from "react"; // ‚úÖ React import ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ
import { useQuery, useQueryClient } from "@tanstack/react-query"; // ‚úÖ tanstack/react-query ‡§∏‡•á import
import { apiRequest } from "../lib/queryclient"; // ‚úÖ /lib/queryclient ‡§∏‡•á ‡§∏‡§æ‡§™‡•á‡§ï‡•ç‡§∑ ‡§™‡§•
import { Link } from "react-router-dom"; // ‚úÖ Link capitalized
import { Card, CardContent, CardHeader, CardTitle } from "../components/ui/card"; // ‚úÖ ‡§∏‡§æ‡§™‡•á‡§ï‡•ç‡§∑ ‡§™‡§•
import { Button } from "../components/ui/button"; // ‚úÖ ‡§∏‡§æ‡§™‡•á‡§ï‡•ç‡§∑ ‡§™‡§•
import { Badge } from "../components/ui/badge"; // ‚úÖ ‡§∏‡§æ‡§™‡•á‡§ï‡•ç‡§∑ ‡§™‡§•
import { Skeleton } from "../components/ui/skeleton"; // ‚úÖ ‡§∏‡§æ‡§™‡•á‡§ï‡•ç‡§∑ ‡§™‡§•
import { Package } from "lucide-react"; // ‚úÖ Package capitalized
import { useSocket } from "../hooks/useSocket"; // ‚úÖ ‡§∏‡§æ‡§™‡•á‡§ï‡•ç‡§∑ ‡§™‡§• ‡§î‡§∞ useSocket capitalized

// api ‡§∏‡•á ‡§Ü‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§°‡•á‡§ü‡§æ ‡§ï‡§æ ‡§á‡§Ç‡§ü‡§∞‡§´‡§º‡•á‡§∏
// ‚úÖ updated for multi-seller structure
export interface SubOrderItem {
  id: number;
  quantity: number;
  product?: {
    id: number;
    name: string;
    image?: string;
    unit?: string;
  };
}

export interface SubOrder {
  id: number;
  sellerId: number;
  sellerName?: string; // ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ
  sellerBusinessName?: string; // ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§∏‡§æ‡§Ø‡§ø‡§ï ‡§®‡§æ‡§Æ
  status: string; // ‡§á‡§∏ ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ï‡•á ‡§π‡§ø‡§∏‡•ç‡§∏‡•á ‡§ï‡§æ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏
  deliveryStatus: string; // ‡§á‡§∏ ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ï‡•á ‡§π‡§ø‡§∏‡•ç‡§∏‡•á ‡§ï‡§æ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏
  total: string | number; // ‡§á‡§∏ ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ï‡•á ‡§π‡§ø‡§∏‡•ç‡§∏‡•á ‡§ï‡§æ ‡§ï‡•Å‡§≤
  items: SubOrderItem[]; // ‡§á‡§∏ ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ï‡•á ‡§Ü‡§á‡§ü‡§Æ
}

export interface CustomerOrder { // ‚úÖ CustomerOrder capitalized
  id: number;
  orderNumber: string; // ‚úÖ orderNumber capitalized
  status: string; // ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡§æ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏
  deliveryStatus: string; // ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡§æ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏
  total: string | number;
  createdAt: string; // ‚úÖ createdAt capitalized
  subOrders?: SubOrder[]; // ‚úÖ subOrders ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ
}

// ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•à‡§ú ‡§µ‡•á‡§∞‡§ø‡§è‡§Ç‡§ü
const statusBadgeVariants = { // ‚úÖ statusBadgeVariants capitalized
  pending: "secondary",
  accepted: "info",
  preparing: "secondary",
  ready_for_pickup: "secondary",
  picked_up: "info",
  out_for_delivery: "info",
  delivered: "success",
  cancelled: "destructive",
  rejected: "destructive",
  default: "secondary",
};

const getStatusBadgeVariant = (status: string) => { // ‚úÖ getStatusBadgeVariant capitalized
  return statusBadgeVariants[status.toLowerCase() as keyof typeof statusBadgeVariants] || statusBadgeVariants.default; // ‚úÖ status.toLowerCase() ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ
};

// ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡§æ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü
const getStatusText = (status: string) => { // ‚úÖ getStatusText capitalized
  switch (status.toLowerCase()) { // ‚úÖ status.toLowerCase() ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ
    case "pending": return "‡§≤‡§Ç‡§¨‡§ø‡§§";
    case "accepted": return "‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§";
    case "preparing": return "‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à";
    case "ready_for_pickup": return "‡§™‡§ø‡§ï‡§Ö‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞";
    case "picked_up": return "‡§™‡§ø‡§ï‡§Ö‡§™ ‡§π‡•ã ‡§ó‡§Ø‡§æ";
    case "out_for_delivery": return "‡§∞‡§æ‡§∏‡•ç‡§§‡•á ‡§Æ‡•á‡§Ç ‡§π‡•à";
    case "delivered": return "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ";
    case "cancelled": return "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ";
    case "rejected": return "‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§";
    default: return "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§";
  }
};

export default function CustomerOrdersPage() { // ‚úÖ CustomerOrdersPage capitalized
  const queryClient = useQueryClient(); // ‚úÖ queryClient capitalized
  const { socket } = useSocket(); // ‚úÖ useSocket capitalized

  const { data: orders, isLoading, isError, error } = useQuery<CustomerOrder[]>({ // ‚úÖ isLoading, isError capitalized
    queryKey: ["customerorders"], // ‚úÖ queryKey capitalized
    queryFn: async () => {
      // ‚úÖ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ø‡§π API ‡§Æ‡§≤‡•ç‡§ü‡•Ä-‡§∏‡•á‡§≤‡§∞ ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ö‡§∞ ‡§Æ‡•á‡§Ç ‡§°‡•á‡§ü‡§æ ‡§µ‡§æ‡§™‡§∏ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
      const response = await apiRequest("get", "/api/customer/orders"); // ‚úÖ apiRequest capitalized, endpoint updated if needed
      return response as CustomerOrder[];
    },
  });

  // socket.io ‡§∏‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§Ö‡§™‡§°‡•á‡§ü‡•ç‡§∏ ‡§∏‡•Å‡§®‡•á‡§Ç
  useEffect(() => { // ‚úÖ useEffect capitalized
    if (!socket || typeof socket.on !== "function") return;

    const onOrderStatusUpdated = (updatedOrder: CustomerOrder) => { // ‚úÖ onOrderStatusUpdated capitalized
      console.log("üì¶ order update received:", updatedOrder);
      queryClient.invalidateQueries({ queryKey: ["customerorders"] }); // ‚úÖ queryKey capitalized
    };

    socket.on("order:status-updated", onOrderStatusUpdated); // ‚úÖ onOrderStatusUpdated capitalized

    return () => {
      if (socket && typeof socket.off === "function") {
        socket.off("order:status-updated", onOrderStatusUpdated); // ‚úÖ onOrderStatusUpdated capitalized
      }
    };
  }, [socket, queryClient]); // ‚úÖ queryClient capitalized

  // ‡§≤‡•ã‡§°‡§ø‡§Ç‡§ó
  if (isLoading) { // ‚úÖ isLoading capitalized
    return (
      <div className="container mx-auto p-4"> {/* ‚úÖ className capitalized */}
        <h1 className="text-2xl font-bold mb-6">‡§Ü‡§™‡§ï‡•á ‡§ë‡§∞‡•ç‡§°‡§∞</h1> {/* ‚úÖ className capitalized */}
        <div className="space-y-4"> {/* ‚úÖ className capitalized */}
          {[...Array(3)].map((_, i) => ( {/* ‚úÖ Array capitalized */}
            <Skeleton key={i} className="h-24 w-full rounded-lg" /> {/* ‚úÖ Skeleton, className capitalized */}
          ))}
        </div>
      </div>
    );
  }

  // ‡§è‡§∞‡§∞
  if (isError) { // ‚úÖ isError capitalized
    return (
      <div className="container mx-auto p-4 text-center"> {/* ‚úÖ className capitalized */}
        <p className="text-red-500"> {/* ‚úÖ className capitalized */}
          ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {(error as Error).message} {/* ‚úÖ Error capitalized */}
        </p>
        <Button onClick={() => window.location.reload()} className="mt-4"> {/* ‚úÖ Button, className capitalized */}
          ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç
        </Button>
      </div>
    );
  }

  // ‡§ï‡•ã‡§à ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
  if (!orders || orders.length === 0) {
    return (
      <div className="container mx-auto p-4 text-center"> {/* ‚úÖ className capitalized */}
        <Package className="mx-auto h-16 w-16 text-gray-400 mb-4" /> {/* ‚úÖ Package, className capitalized */}
        <h2 className="text-xl font-semibold mb-2">‡§ï‡•ã‡§à ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ</h2> {/* ‚úÖ className capitalized */}
        <p className="text-gray-600"> {/* ‚úÖ className capitalized */}
          ‡§Ü‡§™‡§®‡•á ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡§ø‡§Ø‡§æ ‡§π‡•à‡•§ ‡§Ö‡§≠‡•Ä ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç!
        </p>
        <Button asChild className="mt-4"> {/* ‚úÖ Button, asChild, className capitalized */}
          <Link to="/">‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç</Link> {/* ‚úÖ Link capitalized */}
        </Button>
      </div>
    );
  }

  // ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å
  return (
    <div className="container mx-auto p-4"> {/* ‚úÖ className capitalized */}
      <h1 className="text-2xl font-bold mb-6">‡§Ü‡§™‡§ï‡•á ‡§ë‡§∞‡•ç‡§°‡§∞‡•ç‡§∏</h1> {/* ‚úÖ className capitalized */}
      <div className="space-y-4"> {/* ‚úÖ className capitalized */}
        {orders.map((order: CustomerOrder) => (
          <Card key={order.id} className="p-4"> {/* ‚úÖ Card, className capitalized */}
            <CardHeader className="p-0 mb-4"> {/* ‚úÖ CardHeader, className capitalized */}
              <CardTitle className="flex justify-between items-center text-lg"> {/* ‚úÖ CardTitle, className capitalized */}
                <span>‡§ë‡§∞‡•ç‡§°‡§∞ #{order.orderNumber}</span> {/* ‚úÖ orderNumber capitalized */}
                <Badge variant={getStatusBadgeVariant(order.status)}> {/* ‚úÖ getStatusBadgeVariant capitalized */}
                  {getStatusText(order.status)} {/* ‚úÖ getStatusText capitalized */}
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-0"> {/* ‚úÖ CardContent, className capitalized */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground"> {/* ‚úÖ className capitalized */}
                <div>
                  <p>
                    <span className="font-medium text-gray-800">‡§§‡§æ‡§∞‡•Ä‡§ñ:</span>{" "} {/* ‚úÖ className capitalized */}
                    {new Date(order.createdAt).toLocaleDateString()} {/* ‚úÖ Date, createdAt capitalized */}
                  </p>
                </div>
                <div>
                  <p>
                    <span className="font-medium text-gray-800">‡§ï‡•Å‡§≤:</span> ‚Çπ {/* ‚úÖ className capitalized */}
                    {Number(order.total).toLocaleString('en-IN')} {/* ‚úÖ Number capitalized, toLocaleString for currency format */}
                  </p>
                </div>
                <div>
                  <p>
                    <span className="font-medium text-gray-800">‡§∏‡•ç‡§•‡§ø‡§§‡§ø:</span>{" "} {/* ‚úÖ className capitalized */}
                    {getStatusText(order.status)} {/* ‚úÖ getStatusText capitalized */}
                  </p>
                </div>
              </div>

              {/* ‚úÖ ‡§Ø‡§π‡§æ‡§Å ‡§∏‡•á ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ (‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞) ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç */}
              {order.subOrders && order.subOrders.length > 0 && (
                <div className="mt-6 border-t pt-4 space-y-4">
                  <h3 className="text-lg font-semibold">‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ï‡•á ‡§ë‡§∞‡•ç‡§°‡§∞</h3>
                  {order.subOrders.map((subOrder: SubOrder) => (
                    <Card key={subOrder.id} className="p-3 bg-gray-50 border shadow-sm">
                      <CardHeader className="p-0 mb-2">
                        <CardTitle className="flex justify-between items-center text-md font-semibold">
                          <span>{subOrder.sellerBusinessName || subOrder.sellerName || `‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ #${subOrder.sellerId}`}</span>
                          <Badge variant={getStatusBadgeVariant(subOrder.status)} className="text-xs">
                            {getStatusText(subOrder.status)}
                          </Badge>
                        </CardTitle>
                        <p className="text-sm text-gray-600">‡§ï‡•Å‡§≤: ‚Çπ{Number(subOrder.total).toLocaleString('en-IN')}</p>
                      </CardHeader>
                      <CardContent className="p-0 text-sm">
                        {subOrder.items && subOrder.items.length > 0 ? (
                          <div className="space-y-1">
                            {subOrder.items.map(item => (
                              <div key={item.id} className="flex items-center space-x-2">
                                {item.product?.image && (
                                  <img src={item.product.image} alt={item.product.name} className="w-6 h-6 object-cover rounded" />
                                )}
                                <p>{item.product?.name} x {item.quantity} {item.product?.unit}</p>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <p className="text-sm text-gray-500">‡§ï‡•ã‡§à ‡§Ü‡§á‡§ü‡§Æ ‡§®‡§π‡•Ä‡§Ç</p>
                        )}
                         <div className="mt-3 flex space-x-2">
                          <Button asChild variant="outline" size="sm">
                              <Link to={`/order-details/${order.id}?sellerId=${subOrder.sellerId}`}> {/* ‚úÖ ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ-‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§≤‡§ø‡§Ç‡§ï */}
                                ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¶‡•á‡§ñ‡•á‡§Ç
                              </Link>
                          </Button>
                          {(subOrder.status === 'picked_up' || subOrder.status === 'out_for_delivery') && (
                            <Button asChild variant="default" className="bg-purple-600 hover:bg-purple-700" size="sm">
                                <Link to={`/track-order/${order.id}?sellerId=${subOrder.sellerId}`}> {/* ‚úÖ ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ-‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§≤‡§æ‡§á‡§µ ‡§ü‡•ç‡§∞‡•à‡§ï */}
                                    live track
                                </Link>
                            </Button>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}

              {/* ‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§¨‡§ü‡§® ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç */}
              {(!order.subOrders || order.subOrders.length === 0) && (
                <div className="mt-4 flex space-x-3">
                  {/* 1. ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¶‡•á‡§ñ‡•á‡§Ç (details) ‡§¨‡§ü‡§® */}
                  <Button asChild variant="outline">
                    <Link to={`/order-details/${order.id}`}>
                      ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¶‡•á‡§ñ‡•á‡§Ç
                    </Link>
                  </Button>

                  {/* 2. live track ‡§¨‡§ü‡§® (‡§ï‡•á‡§µ‡§≤ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è) */}
                  {(order.status === 'picked_up' || order.status === 'out_for_delivery') && (
                      <Button asChild variant="default" className="bg-purple-600 hover:bg-purple-700">
                          <Link to={`/track-order/${order.id}`}>
                              live track
                          </Link>
                      </Button>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
                      }
