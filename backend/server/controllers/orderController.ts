// backend/server/controllers/ordercontroller.ts
import { Request, Response, NextFunction } from "express"; // ‚úÖ express imports ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§ï‡§∞‡•á‡§Ç
import { v4 as uuidv4 } from "uuid";
import { db } from "../db";
import {
  deliveryAddresses,
  orders, // Master Order
  subOrders, // Sub-Orders per seller
  deliveryBatches, // Delivery groups
  orderItems, // Items now link to subOrders
  cartItems,
  products,
  masterOrderStatusEnum, // ‚úÖ Master Order Status
  subOrderStatusEnum, // ‚úÖ Sub-Order Status
  deliveryStatusEnum, // ‚úÖ Delivery Batch Status
  approvalStatusEnum,
  sellersPgTable,
  stores, // ‚úÖ Stores ‡§ü‡•á‡§¨‡§≤ ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
  deliveryBoys, // ‚úÖ Delivery Boys ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç (‡§∞‡§ø‡§≤‡•á‡§∂‡§Ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è)
  // paymentMethodEnum, // ‚úÖ ‡§Ø‡§¶‡§ø paymentMethodEnum ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•ã ‡§§‡•ã ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
  // paymentStatusEnum, // ‚úÖ ‡§Ø‡§¶‡§ø paymentStatusEnum ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•ã ‡§§‡•ã ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
} from "../../shared/backend/schema"; // ‚úÖ schema ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡•á ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
import { eq, desc, and, inArray, sql } from "drizzle-orm";
import { AuthenticatedRequest } from "../middleware/authMiddleware"; // ‚úÖ AuthenticatedRequest ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§®‡§æ‡§Æ ‡§∏‡•á ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
import { getIO } from "../socket"; // ‚úÖ getIo ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§®‡§æ‡§Æ ‡§∏‡•á ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
import { json } from "drizzle-orm/pg-core"; // ‚úÖ json ‡§ï‡•ã drizzle ‡§∏‡•á ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç

// --- ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø (Helper Functions) ---

// ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç: ‡§Ø‡§π Haversine ‡§´‡§º‡•â‡§∞‡•ç‡§Æ‡•Ç‡§≤‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§∏‡§∞‡§≤ ‡§™‡•ç‡§≤‡•á‡§∏‡§π‡•ã‡§≤‡•ç‡§°‡§∞ ‡§π‡•à‡•§
// ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® (Production) ‡§Æ‡•á‡§Ç, ‡§Ü‡§™‡§ï‡•ã ‡§è‡§ï ‡§∏‡§ü‡•Ä‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§®‡•ç‡§µ‡§Ø‡§® ‡§Ø‡§æ PostGIS ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
// PostGIS ‡§ï‡•á ‡§¨‡§ø‡§®‡§æ, ‡§Ø‡§π ‡§è‡§ï ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§¶‡•Ç‡§∞‡•Ä ‡§π‡•à‡•§
const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
  if (lat1 === 0 || lon1 === 0 || lat2 === 0 || lon2 === 0) return 9999; // ‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡§Æ‡§®‡•ç‡§µ‡§Ø ‡§π‡•à ‡§§‡•ã ‡§¨‡§°‡§º‡•Ä ‡§¶‡•Ç‡§∞‡•Ä ‡§≤‡•å‡§ü‡§æ‡§è‡§Ç

  const R = 6371; // ‡§™‡•É‡§•‡•ç‡§µ‡•Ä ‡§ï‡•Ä ‡§§‡•ç‡§∞‡§ø‡§ú‡•ç‡§Ø‡§æ ‡§ï‡§ø‡§≤‡•ã‡§Æ‡•Ä‡§ü‡§∞ ‡§Æ‡•á‡§Ç
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const distance = R * c; // ‡§ï‡§ø‡§≤‡•ã‡§Æ‡•Ä‡§ü‡§∞ ‡§Æ‡•á‡§Ç ‡§¶‡•Ç‡§∞‡•Ä
  return distance;
};

// ‡§è‡§ï ‡§°‡§Æ‡•Ä ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•â‡§Ø ‡§Ö‡§∏‡§æ‡§á‡§®‡§Æ‡•á‡§Ç‡§ü ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
// ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§®‡•ç‡§µ‡§Ø‡§® ‡§Æ‡•á‡§Ç, ‡§Ø‡§π ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§§‡§æ, ‡§∏‡•ç‡§•‡§æ‡§®, ‡§≤‡•ã‡§° ‡§Ü‡§¶‡§ø ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§è‡§ï ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•â‡§Ø ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§ó‡§æ‡•§
async function assignDeliveryBoy(tx: any, masterOrderId: number, customerLat: number, customerLng: number): Promise<number | null> {
    // ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™ ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§∏‡•á ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•â‡§Ø ‡§ï‡•ã ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
    // ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è, 5 ‡§ï‡§ø‡§Æ‡•Ä ‡§ï‡•á ‡§≠‡•Ä‡§§‡§∞ ‡§î‡§∞ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß
    const availableDeliveryBoys = await tx.select()
        .from(deliveryBoys)
        .where(eq(deliveryBoys.isAvailable, true));
    
    // ‡§∏‡§∞‡§≤ ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§¨‡§∏ ‡§™‡§π‡§≤‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•â‡§Ø ‡§≤‡•å‡§ü‡§æ ‡§¶‡•á‡§Ç
    if (availableDeliveryBoys.length > 0) {
        return availableDeliveryBoys[0].id;
    }
    return null;
}

/**
 * helper function to validate delivery address or create a new one.
 * returns { Promise<{ id: number, lat: number, lng: number, fullAddress: string, city: string, state: string, pincode: string }> }
 */
async function handleDeliveryAddress(
  tx: any, // Drizzle transaction
  userId: number,
  deliveryAddressId?: number,
  newDeliveryAddress?: any,
  reqUser?: any // req.user ‡§∏‡•á ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è
): Promise<{ id: number; lat: number; lng: number; fullAddress: string; city: string; state: string; pincode: string }> {
  let finalDeliveryAddressId: number;
  let finalDeliveryLat: number;
  let finalDeliveryLng: number;
  let finalFullAddress: string;
  let finalCity: string;
  let finalState: string;
  let finalPincode: string;

  if (newDeliveryAddress) {
    const safeAddress = newDeliveryAddress || {};
    const [insertedAddress] = await tx.insert(deliveryAddresses).values({
      userId,
      fullName: safeAddress.fullName || reqUser?.name || "Unknown Customer",
      phoneNumber: safeAddress.phone || reqUser?.phone || "0000000000",
      addressLine1: safeAddress.address || safeAddress.addressLine1 || "N/A",
      addressLine2: safeAddress.landmark || safeAddress.addressLine2 || "",
      city: safeAddress.city || "Unknown",
      postalCode: safeAddress.pincode || safeAddress.postalCode || "000000",
      state: safeAddress.state || "Rajasthan",
      latitude: safeAddress.latitude || 0,
      longitude: safeAddress.longitude || 0,
      isDefault: false,
      createdAt: new Date(),
    }).returning();

    if (!insertedAddress) throw new Error('Failed to create new delivery address.');

    finalDeliveryAddressId = insertedAddress.id;
    finalDeliveryLat = insertedAddress.latitude || 0;
    finalDeliveryLng = insertedAddress.longitude || 0;
    finalCity = insertedAddress.city || "Unknown";
    finalState = insertedAddress.state || "Unknown";
    finalPincode = insertedAddress.postalCode || "000000";
    finalFullAddress = JSON.stringify({
      addressLine1: insertedAddress.addressLine1,
      addressLine2: insertedAddress.addressLine2,
      city: insertedAddress.city,
      pincode: insertedAddress.postalCode,
      latitude: insertedAddress.latitude,
      longitude: insertedAddress.longitude,
      fullName: insertedAddress.fullName,
      phoneNumber: insertedAddress.phoneNumber
    });
  } else if (deliveryAddressId) {
    const [existingAddress] = await tx.select()
      .from(deliveryAddresses)
      .where(and(eq(deliveryAddresses.id, deliveryAddressId), eq(deliveryAddresses.userId, userId)));

    if (!existingAddress) {
      throw new Error('Provided delivery address not found or does not belong to user.');
    }
    finalDeliveryAddressId = existingAddress.id;
    finalDeliveryLat = existingAddress.latitude || 0;
    finalDeliveryLng = existingAddress.longitude || 0;
    finalCity = existingAddress.city || "Unknown";
    finalState = existingAddress.state || "Unknown";
    finalPincode = existingAddress.postalCode || "000000";
    finalFullAddress = JSON.stringify({
      addressLine1: existingAddress.addressLine1,
      addressLine2: existingAddress.addressLine2,
      city: existingAddress.city,
      pincode: existingAddress.postalCode,
      latitude: existingAddress.latitude,
      longitude: existingAddress.longitude,
      fullName: existingAddress.fullName,
      phoneNumber: existingAddress.phoneNumber
    });
  } else {
    throw new Error('No valid delivery address provided.');
  }

  return { 
    id: finalDeliveryAddressId, 
    lat: finalDeliveryLat, 
    lng: finalDeliveryLng, 
    fullAddress: finalFullAddress,
    city: finalCity,
    state: finalState,
    pincode: finalPincode,
  };
}


/**
 * handles placing a direct "buy now" order.
 */
export const placeOrderByNow = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
  console.log("üöÄ [API] Received request to place buy now order.");
  const userId = req.user?.id;

  if (!userId) {
    return res.status(401).json({ message: "Unauthorized: User not logged in." });
  }

  const {
    deliveryAddressId,
    newDeliveryAddress,
    paymentMethod,
    deliveryInstructions,
    item, // { productId, quantity, priceAtAdded (‡§Ø‡§æ unitPrice), sellerId }
    subtotal,
    total,
    deliveryCharge,
    sellerId, // buy now ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§π‡•Ä sellerId ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•à
  } = req.body;

  if (!item) {
    return res.status(400).json({ message: "Item details are empty, cannot place an order." });
  }
  if (!deliveryAddressId && !newDeliveryAddress) {
    return res.status(400).json({ message: "Delivery address is required. Provide deliveryAddressId or newDeliveryAddress." });
  }
  if (!paymentMethod) {
    return res.status(400).json({ message: "Invalid or missing payment method." });
  }
  if (typeof subtotal !== 'number' || typeof total !== 'number' || typeof deliveryCharge !== 'number') {
    return res.status(400).json({ message: "subtotal, total, and deliveryCharge must be numbers." });
  }
  if (!sellerId) {
      return res.status(400).json({ message: "Seller ID is required for 'buy now' order." });
  }

  await db.transaction(async (tx) => {
    try {
      const { 
          id: finalDeliveryAddressId, 
          lat: finalDeliveryLat, 
          lng: finalDeliveryLng, 
          fullAddress: finalDeliveryAddressJson,
          city: finalCity,
          state: finalState,
          pincode: finalPincode,
      } = await handleDeliveryAddress(tx, userId, deliveryAddressId, newDeliveryAddress, req.user);

      // ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü ‡§°‡§ø‡§ü‡•á‡§≤‡•ç‡§∏ ‡§´‡•á‡§ö ‡§ï‡§∞‡•á‡§Ç
      const [product] = await tx.select().from(products).where(eq(products.id, item.productId));

      if (!product || product.approvalStatus !== approvalStatusEnum.enumvalues[1]) {
        throw new Error(`Product ${item.productId} is not available or not approved.`);
      }
      if (product.minOrderQty && item.quantity < product.minOrderQty) {
        throw new Error(`Minimum order quantity for ${product.name} is ${product.minOrderQty}.`);
      }
      if (product.maxOrderQty && item.quantity > product.maxOrderQty) {
        throw new Error(`Maximum order quantity for ${product.name} is ${product.maxOrderQty}.`);
      }

      const unitPrice = item.priceAtAdded ?? item.unitPrice ?? product.price;
      const itemTotalPrice = unitPrice * item.quantity;
      
      // ‚úÖ ‡§´‡•ç‡§∞‡§Ç‡§ü‡§è‡§Ç‡§° ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§∏‡§¨‡§ü‡•ã‡§ü‡§≤ ‡§ï‡•Ä ‡§∏‡§∞‡•ç‡§µ‡§∞-‡§∏‡§æ‡§á‡§° ‡§ó‡§£‡§®‡§æ ‡§∏‡•á ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç (‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ)
      if (Math.abs(itemTotalPrice - subtotal) > 0.01) {
        throw new Error('Calculated subtotal does not match provided subtotal. Possible price discrepancy.');
      }

      // 1. ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç
      const [masterOrder] = await tx.insert(orders).values({
          orderNumber: `ORD-${Date.now()}-${userId}`,
          customerId: userId,
          deliveryAddressId: finalDeliveryAddressId,
          deliveryAddress: finalDeliveryAddressJson,
          deliveryCity: finalCity,
          deliveryState: finalState,
          deliveryPincode: finalPincode,
          deliveryLat: finalDeliveryLat,
          deliveryLng: finalDeliveryLng,
          subtotal: subtotal,
          total: total, // ‡§Ø‡§π‡§æ‡§Å ‡§™‡•ç‡§∞‡•ã‡§Æ‡•ã/‡§°‡§ø‡§∏‡•ç‡§ï‡§æ‡§â‡§Ç‡§ü ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
          paymentMethod: paymentMethod,
          paymentStatus: paymentMethod === 'COD' ? 'pending' : 'pending',
          status: masterOrderStatusEnum.enumvalues[0], // 'pending'
          deliveryInstructions: deliveryInstructions || null,
          createdAt: new Date(),
          updatedAt: new Date(),
      }).returning({ id: orders.id, orderNumber: orders.orderNumber });

      if (!masterOrder) throw new Error('Failed to create master order.');

      // 2. ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç (‡§è‡§ï‡§≤ ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è)
      const [sellerStore] = await tx.select().from(stores).where(eq(stores.sellerId, sellerId)).limit(1);
      if (!sellerStore) throw new Error(`Store details not found for seller ${sellerId}.`);
      
      const [sellerInfo] = await tx.select().from(sellersPgTable).where(eq(sellersPgTable.id, sellerId)).limit(1);
      const isSelfDelivery = sellerInfo?.isSelfDeliveryBySeller || false;

      const [subOrder] = await tx.insert(subOrders).values({
          masterOrderId: masterOrder.id,
          subOrderNumber: `${masterOrder.orderNumber}-${sellerId}`,
          sellerId: sellerId,
          storeId: sellerStore.id,
          subtotal: itemTotalPrice,
          deliveryCharge: deliveryCharge,
          total: total,
          status: subOrderStatusEnum.enumvalues[0], // 'pending'
          isSelfDeliveryBySeller: isSelfDelivery,
          createdAt: new Date(),
          updatedAt: new Date(),
      }).returning({ id: subOrders.id });

      if (!subOrder) throw new Error('Failed to create sub-order.');

      // 3. ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§Ü‡§á‡§ü‡§Æ ‡§¨‡§®‡§æ‡§è‡§Ç
      await tx.insert(orderItems).values({
          subOrderId: subOrder.id,
          productId: product.id,
          productName: product.name,
          productImage: product.image,
          productPrice: unitPrice,
          productUnit: product.unit,
          quantity: item.quantity,
          itemTotal: itemTotalPrice,
          createdAt: new Date(),
          updatedAt: new Date(),
      });

      // 4. ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•à‡§ö‡§ø‡§Ç‡§ó (‡§Ø‡§¶‡§ø ‡§∏‡•á‡§≤‡•ç‡§´-‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à)
      if (!isSelfDelivery) {
          const assignedDeliveryBoyId = await assignDeliveryBoy(tx, masterOrder.id, finalDeliveryLat, finalDeliveryLng);

          const [deliveryBatch] = await tx.insert(deliveryBatches).values({
              masterOrderId: masterOrder.id,
              deliveryBoyId: assignedDeliveryBoyId,
              customerDeliveryAddressId: finalDeliveryAddressId,
              status: deliveryStatusEnum.enumvalues[0], // 'pending'
              estimatedDeliveryTime: new Date(Date.now() + 60 * 60 * 1000), // ‡§°‡§Æ‡•Ä: 1 ‡§ò‡§Ç‡§ü‡§æ
              deliveryOtp: Math.floor(1000 + Math.random() * 9000).toString(),
              createdAt: new Date(),
              updatedAt: new Date(),
          }).returning({ id: deliveryBatches.id });

          await tx.update(subOrders)
              .set({
                  deliveryBatchId: deliveryBatch.id,
                  // deliveryBoyId: assignedDeliveryBoyId, // deliveryBoyId ‡§Ö‡§¨ deliveryBatches ‡§Æ‡•á‡§Ç ‡§π‡•à
              })
              .where(eq(subOrders.id, subOrder.id));
      }


      getIo().emit("new-order", {
        orderId: masterOrder.id,
        orderNumber: masterOrder.orderNumber,
        customerId: masterOrder.customerId,
        total: masterOrder.total,
        status: masterOrder.status,
        createdAt: masterOrder.createdAt,
        // items: [item], // ‡§Ø‡§π‡§æ‡§Å ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§Ü‡§á‡§ü‡§Æ ‡§°‡•á‡§ü‡§æ ‡§¶‡•á‡§Ç
      });
      getIo().emit(`user:${userId}`, { type: 'order-placed', order: masterOrder, subOrder: subOrder });

      return res.status(201).json({
        message: "Order placed successfully!",
        orderId: masterOrder.id,
        orderNumber: masterOrder.orderNumber,
        data: masterOrder,
      });

    } catch (error: any) {
      console.error("‚ùå Error placing buy now order (transaction rolled back):", error);
      // next(error);
      return res.status(500).json({ message: error.message || "Failed to place order." });
    }
  });
};

/**
 * handles placing an order from the user's cart.
 */
export const placeOrderFromCart = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
  console.log("üöÄ [API] Received request to place order from cart.");
  const userId = req.user?.id;
  if (!userId) {
    return res.status(401).json({ message: "Unauthorized: User not logged in." });
  }

  const {
    deliveryAddressId,
    newDeliveryAddress,
    paymentMethod,
    deliveryInstructions,
    subtotal: frontendSubtotal, // ‡§´‡•ç‡§∞‡§Ç‡§ü‡§è‡§Ç‡§° ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§
    total: frontendTotal,      // ‡§´‡•ç‡§∞‡§Ç‡§ü‡§è‡§Ç‡§° ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§
    deliveryCharge: frontendDeliveryCharge, // ‡§´‡•ç‡§∞‡§Ç‡§ü‡§è‡§Ç‡§° ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ (‡§ï‡•Å‡§≤ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ö‡§æ‡§∞‡•ç‡§ú)
  } = req.body;

  if (!deliveryAddressId && !newDeliveryAddress) {
    return res.status(400).json({ message: "Delivery address is required. Provide deliveryAddressId or newDeliveryAddress." });
  }
  if (!paymentMethod) {
    return res.status(400).json({ message: "Invalid or missing payment method." });
  }
  if (typeof frontendSubtotal !== 'number' || typeof frontendTotal !== 'number' || typeof frontendDeliveryCharge !== 'number') {
    return res.status(400).json({ message: "subtotal, total, and deliveryCharge must be numbers." });
  }

  await db.transaction(async (tx) => {
    try {
      const { 
          id: finalDeliveryAddressId, 
          lat: finalDeliveryLat, 
          lng: finalDeliveryLng, 
          fullAddress: finalDeliveryAddressJson,
          city: finalCity,
          state: finalState,
          pincode: finalPincode,
      } = await handleDeliveryAddress(tx, userId, deliveryAddressId, newDeliveryAddress, req.user);

      // ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Ü‡§á‡§ü‡§Æ‡•ç‡§∏ ‡§ï‡•ã fetch ‡§ï‡§∞‡•á‡§Ç
      const userCartItems = await tx.query.cartItems.findMany({ // ‚úÖ findMany ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
        where: eq(cartItems.userId, userId),
        with: {
          product: {
            columns: {
              id: true,
              name: true,
              price: true,
              sellerId: true,
              approvalStatus: true,
              minOrderQty: true,
              maxOrderQty: true,
              image: true,
              unit: true,
            }
          },
          seller: { // ‚úÖ ‡§∏‡•á‡§≤‡§∞ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§≠‡•Ä fetch ‡§ï‡§∞‡•á‡§Ç
              columns: {
                  id: true,
                  businessName: true,
                  isSelfDeliveryBySeller: true, // ‡§∏‡•á‡§≤‡•ç‡§´-‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ö‡•á‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è
              }
          }
        }
      });

      if (userCartItems.length === 0) {
        throw new Error('Your cart is empty. Please add items before placing an order.');
      }

      let masterOrderCalculatedSubtotal = 0;
      let masterOrderCalculatedDeliveryCharge = 0; // ‡§∏‡§≠‡•Ä ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ö‡§æ‡§∞‡•ç‡§ú ‡§ï‡§æ ‡§Ø‡•ã‡§ó

      // ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Ü‡§á‡§ü‡§Æ ‡§ï‡•ã ‡§∏‡•á‡§≤‡§∞-‡§µ‡§æ‡§á‡§ú ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§°‡•á‡§ü‡§æ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
      const tempSubOrders: { 
          sellerId: number; 
          storeId: number; 
          isSelfDelivery: boolean; 
          subtotal: number; 
          deliveryCharge: number; // ‡§Ø‡§π ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡§æ ‡§Ö‡§™‡§®‡§æ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ö‡§æ‡§∞‡•ç‡§ú ‡§π‡•à
          total: number; 
          items: typeof cartItems.$inferSelect & { product: typeof products.$inferSelect }[]; 
          storeLat: number; 
          storeLng: number;
          estimatedTime: number; // 30 ‡§Æ‡§ø‡§®‡§ü ‡§ï‡§æ ‡§Ö‡§Ç‡§§‡§∞ ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è (‡§∏‡§∞‡§≤ ‡§â‡§¶‡§æ‡§π‡§∞‡§£)
      }[] = [];

      const groupedBySeller = new Map<number, (typeof cartItems.$inferSelect & { product: typeof products.$inferSelect })[]>();

      for (const cartItem of userCartItems) {
          const product = cartItem.product;
          if (!product || product.approvalStatus !== approvalStatusEnum.enumvalues[1]) {
            console.warn(`[order_from_cart] Product ${cartItem.productId} not found or not approved, skipping.`);
            continue;
          }
          if (product.minOrderQty && cartItem.quantity < product.minOrderQty) {
            throw new Error(`Minimum order quantity for ${product.name} is ${product.minOrderQty}.`);
          }
          if (product.maxOrderQty && cartItem.quantity > product.maxOrderQty) {
            throw new Error(`Maximum order quantity for ${product.name} is ${product.maxOrderQty}.`);
          }

          if (!groupedBySeller.has(cartItem.sellerId)) {
              groupedBySeller.set(cartItem.sellerId, []);
          }
          groupedBySeller.get(cartItem.sellerId)?.push({ ...cartItem, product });
          masterOrderCalculatedSubtotal += cartItem.totalPrice;
      }
      
      // ‡§´‡•ç‡§∞‡§Ç‡§ü‡§è‡§Ç‡§° ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§∏‡§¨‡§ü‡•ã‡§ü‡§≤ ‡§ï‡•Ä ‡§∏‡§∞‡•ç‡§µ‡§∞-‡§∏‡§æ‡§á‡§° ‡§ó‡§£‡§®‡§æ ‡§∏‡•á ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç (‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ)
      if (Math.abs(masterOrderCalculatedSubtotal - frontendSubtotal) > 0.01) {
        throw new Error('Calculated subtotal does not match provided subtotal. Possible price discrepancy.');
      }

      const sellerIds = Array.from(groupedBySeller.keys());
      const sellerStores = await tx.query.stores.findMany({
          where: inArray(stores.sellerId, sellerIds),
      });
      const sellerStoreMap = new Map(sellerStores.map(s => [s.sellerId, s]));

      for (const [sellerId, items] of groupedBySeller.entries()) {
          const store = sellerStoreMap.get(sellerId);
          const seller = items[0].seller; // ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§Ü‡§á‡§ü‡§Æ ‡§∏‡•á ‡§∏‡•á‡§≤‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡•á‡§Ç

          if (!store || !store.latitude || !store.longitude || !seller) {
              throw new Error(`Store or seller details missing for seller ${sellerId}`);
          }

          const subtotal = items.reduce((sum, item) => sum + item.totalPrice, 0);
          // ‚úÖ ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡§æ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ö‡§æ‡§∞‡•ç‡§ú ‡§Ø‡§π‡§æ‡§Å ‡§™‡§∞ ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü ‡§π‡•ã‡§ó‡§æ
          // ‡§Ø‡§π ‡§≤‡•â‡§ú‡§ø‡§ï ‡§ú‡§ü‡§ø‡§≤ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à: ‡§¶‡•Ç‡§∞‡•Ä, ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞, ‡§∏‡•á‡§≤‡§∞ ‡§ï‡•á ‡§®‡§ø‡§Ø‡§Æ
          const currentSubOrderDeliveryCharge = seller.isSelfDeliveryBySeller ? 0 : 50; // ‡§°‡§Æ‡•Ä ‡§ö‡§æ‡§∞‡•ç‡§ú
          masterOrderCalculatedDeliveryCharge += currentSubOrderDeliveryCharge;

          tempSubOrders.push({
              sellerId,
              storeId: store.id,
              isSelfDelivery: seller.isSelfDeliveryBySeller,
              subtotal,
              deliveryCharge: currentSubOrderDeliveryCharge,
              total: subtotal + currentSubOrderDeliveryCharge,
              items: items,
              storeLat: store.latitude,
              storeLng: store.longitude,
              estimatedTime: 60, // ‡§°‡§Æ‡•Ä: 60 ‡§Æ‡§ø‡§®‡§ü ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä/‡§™‡§ø‡§ï‡§Ö‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è
          });
      }

      // ‚úÖ ‡§´‡•ç‡§∞‡§Ç‡§ü‡§è‡§Ç‡§° ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡•Å‡§≤ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ö‡§æ‡§∞‡•ç‡§ú ‡§ï‡•Ä ‡§∏‡§∞‡•ç‡§µ‡§∞-‡§∏‡§æ‡§á‡§° ‡§ó‡§£‡§®‡§æ ‡§∏‡•á ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç
      if (Math.abs(masterOrderCalculatedDeliveryCharge - frontendDeliveryCharge) > 0.01) {
        // throw new Error('Calculated total delivery charge does not match provided total delivery charge.');
        console.warn('Calculated total delivery charge does not match provided total delivery charge. Using calculated value.');
        // ‡§Ü‡§™ ‡§Ø‡§π‡§æ‡§Å ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§´‡•á‡§Ç‡§ï ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§∏‡§∞‡•ç‡§µ‡§∞-‡§∏‡§æ‡§á‡§° ‡§ó‡§£‡§®‡§æ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
      }
      
      const masterOrderCalculatedTotal = masterOrderCalculatedSubtotal + masterOrderCalculatedDeliveryCharge;
      if (Math.abs(masterOrderCalculatedTotal - frontendTotal) > 0.01) {
          // throw new Error('Calculated total does not match provided total.');
          console.warn('Calculated total does not match provided total. Using calculated value.');
      }

      // 1. ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç
      const [masterOrder] = await tx.insert(orders).values({
          orderNumber: `ORD-${Date.now()}-${userId}`,
          customerId: userId,
          deliveryAddressId: finalDeliveryAddressId,
          deliveryAddress: finalDeliveryAddressJson,
          deliveryCity: finalCity,
          deliveryState: finalState,
          deliveryPincode: finalPincode,
          deliveryLat: finalDeliveryLat,
          deliveryLng: finalDeliveryLng,
          subtotal: masterOrderCalculatedSubtotal,
          total: masterOrderCalculatedTotal, // ‡§™‡•ç‡§∞‡•ã‡§Æ‡•ã/‡§°‡§ø‡§∏‡•ç‡§ï‡§æ‡§â‡§Ç‡§ü ‡§Ø‡§π‡§æ‡§Å ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
          paymentMethod: paymentMethod,
          paymentStatus: paymentMethod === 'COD' ? 'pending' : 'pending',
          status: masterOrderStatusEnum.enumvalues[0], // 'pending'
          deliveryInstructions: deliveryInstructions || null,
          createdAt: new Date(),
          updatedAt: new Date(),
      }).returning({ id: orders.id, orderNumber: orders.orderNumber });

      if (!masterOrder) throw new Error('Failed to create master order.');

      // 2. ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•à‡§ö‡§ø‡§Ç‡§ó ‡§≤‡•â‡§ú‡§ø‡§ï
      const batchesToCreate: { 
          subOrdersData: (typeof tempSubOrders[number] & { subOrderId: number })[], 
          deliveryBoyId: number | null 
      }[] = [];
      
      const nonSelfDeliverySubOrders = tempSubOrders.filter(s => !s.isSelfDelivery);
      const selfDeliverySubOrders = tempSubOrders.filter(s => s.isSelfDelivery);
      
      const consoleTimeDiffThreshold = 30; // 30 ‡§Æ‡§ø‡§®‡§ü (‡§∏‡§∞‡§≤ ‡§â‡§¶‡§æ‡§π‡§∞‡§£, ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§Æ‡•á‡§Ç ‡§Ö‡§ß‡§ø‡§ï ‡§ú‡§ü‡§ø‡§≤ ‡§π‡•ã‡§ó‡§æ)
      const consoleDistThreshold = 2.0; // 2 ‡§ï‡§ø‡§Æ‡•Ä

      // A) ‡§®‡•â‡§®-‡§∏‡•á‡§≤‡•ç‡§´-‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•à‡§ö ‡§¨‡§®‡§æ‡§è‡§Ç
      let currentBatchGroup: (typeof tempSubOrders[number] & { subOrderId: number })[] = [];
      
      // ‡§∏‡§≠‡•Ä non-self-delivery sub-orders ‡§ï‡•ã ‡§∏‡•â‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç (‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§∏‡§Æ‡§Ø ‡§∏‡•á, ‡§Ø‡§æ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•á ‡§ï‡§∞‡•Ä‡§¨ ‡§∏‡•á)
      // ‡§á‡§∏‡•á ‡§î‡§∞ ‡§Ö‡§ß‡§ø‡§ï ‡§™‡§∞‡§ø‡§∑‡•ç‡§ï‡•É‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
      nonSelfDeliverySubOrders.sort((a, b) => {
          // ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•á ‡§∏‡•ç‡§•‡§æ‡§® ‡§∏‡•á ‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡•ã ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ ‡§¶‡•á‡§Ç
          const distA = calculateDistance(finalDeliveryLat, finalDeliveryLng, a.storeLat, a.storeLng);
          const distB = calculateDistance(finalDeliveryLat, finalDeliveryLng, b.storeLat, b.storeLng);
          return distA - distB;
      });

      for (const subOrderData of nonSelfDeliverySubOrders) {
          // ‡§™‡§π‡§≤‡•á ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç
          const [subOrder] = await tx.insert(subOrders).values({
              masterOrderId: masterOrder.id,
              subOrderNumber: `${masterOrder.orderNumber}-${subOrderData.sellerId}`,
              sellerId: subOrderData.sellerId,
              storeId: subOrderData.storeId,
              subtotal: subOrderData.subtotal,
              deliveryCharge: subOrderData.deliveryCharge,
              total: subOrderData.total,
              status: subOrderStatusEnum.enumvalues[0], // 'pending'
              isSelfDeliveryBySeller: false,
              createdAt: new Date(),
              updatedAt: new Date(),
          }).returning({ id: subOrders.id });
          
          if (!subOrder) throw new Error(`Failed to create sub-order for seller ${subOrderData.sellerId}`);

          const subOrderWithId = { ...subOrderData, subOrderId: subOrder.id };

          if (currentBatchGroup.length === 0) {
              currentBatchGroup.push(subOrderWithId);
          } else {
              // ‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§¨‡•à‡§ö ‡§ï‡•á ‡§™‡§π‡§≤‡•á ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§∏‡•á ‡§¶‡•Ç‡§∞‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡•á‡§Ç
              const firstStoreInBatch = currentBatchGroup[0];
              const dist = calculateDistance(firstStoreInBatch.storeLat, firstStoreInBatch.storeLng, subOrderData.storeLat, subOrderData.storeLng);
              
              // ‡§∏‡§Æ‡§Ø ‡§ï‡§æ ‡§Ö‡§Ç‡§§‡§∞ ‡§≠‡•Ä ‡§ö‡•á‡§ï ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç (currentBatchGroup[0].estimatedTime - subOrderData.estimatedTime <= consoleTimeDiffThreshold)
              
              if (dist <= consoleDistThreshold) {
                  currentBatchGroup.push(subOrderWithId);
              } else {
                  // ‡§¶‡•Ç‡§∞‡•Ä ‡§ï‡•Ä ‡§∏‡•Ä‡§Æ‡§æ ‡§™‡§æ‡§∞ ‡§π‡•ã ‡§ó‡§à, ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¨‡•à‡§ö ‡§ï‡•ã ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§è‡§ï ‡§®‡§Ø‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
                  batchesToCreate.push({ subOrdersData: currentBatchGroup, deliveryBoyId: null });
                  currentBatchGroup = [subOrderWithId];
              }
          }
      }
      
      // ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§¨‡•à‡§ö ‡§ï‡•ã ‡§™‡•Å‡§∂ ‡§ï‡§∞‡•á‡§Ç (‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§¨‡§æ‡§ï‡•Ä ‡§π‡•à)
      if (currentBatchGroup.length > 0) {
          batchesToCreate.push({ subOrdersData: currentBatchGroup, deliveryBoyId: null });
      }
      
      // B) ‡§∏‡•á‡§≤‡•ç‡§´-‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§µ‡§æ‡§≤‡•á ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è
      for (const subOrderData of selfDeliverySubOrders) {
          const [subOrder] = await tx.insert(subOrders).values({
              masterOrderId: masterOrder.id,
              subOrderNumber: `${masterOrder.orderNumber}-${subOrderData.sellerId}-SELF`,
              sellerId: subOrderData.sellerId,
              storeId: subOrderData.storeId,
              subtotal: subOrderData.subtotal,
              deliveryCharge: 0, // ‡§∏‡•á‡§≤‡•ç‡§´ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ö‡§æ‡§∞‡•ç‡§ú ‡§®‡§π‡•Ä‡§Ç
              total: subOrderData.subtotal,
              status: subOrderStatusEnum.enumvalues[0], // 'pending'
              isSelfDeliveryBySeller: true,
              createdAt: new Date(),
              updatedAt: new Date(),
          }).returning({ id: subOrders.id });

          if (!subOrder) throw new Error(`Failed to create self-delivery sub-order for seller ${subOrderData.sellerId}`);

          // ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§Ü‡§á‡§ü‡§Æ‡•ç‡§∏ ‡§¨‡§®‡§æ‡§è‡§Ç
          for (const item of subOrderData.items) {
              await tx.insert(orderItems).values({
                  subOrderId: subOrder.id,
                  productId: item.product.id,
                  productName: item.product.name,
                  productImage: item.product.image,
                  productPrice: item.priceAtAdded,
                  productUnit: item.product.unit,
                  quantity: item.quantity,
                  itemTotal: item.totalPrice,
                  createdAt: new Date(),
                  updatedAt: new Date(),
              });
          }
      }

      // 3. ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•à‡§ö ‡§¨‡§®‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
      for (const batch of batchesToCreate) {
          const assignedDeliveryBoyId = await assignDeliveryBoy(tx, masterOrder.id, finalDeliveryLat, finalDeliveryLng);

          // a) ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•à‡§ö ‡§¨‡§®‡§æ‡§è‡§Ç
          const [deliveryBatch] = await tx.insert(deliveryBatches).values({
              masterOrderId: masterOrder.id,
              deliveryBoyId: assignedDeliveryBoyId,
              customerDeliveryAddressId: finalDeliveryAddressId,
              status: deliveryStatusEnum.enumvalues[0], // 'pending'
              estimatedDeliveryTime: new Date(Date.now() + 60 * 60 * 1000), // ‡§°‡§Æ‡•Ä: 1 ‡§ò‡§Ç‡§ü‡§æ
              deliveryOtp: Math.floor(1000 + Math.random() * 9000).toString(),
              createdAt: new Date(),
              updatedAt: new Date(),
          }).returning({ id: deliveryBatches.id });

          if (!deliveryBatch) throw new Error('Failed to create delivery batch.');

          // b) ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•ã ‡§¨‡•à‡§ö ID ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
          const subOrderIdsToUpdate = batch.subOrdersData.map(s => s.subOrderId);
          if (subOrderIdsToUpdate.length > 0) {
              await tx.update(subOrders)
                  .set({
                      deliveryBatchId: deliveryBatch.id,
                      // deliveryBoyId: assignedDeliveryBoyId, // deliveryBoyId ‡§Ö‡§¨ deliveryBatches ‡§Æ‡•á‡§Ç ‡§π‡•à
                  })
                  .where(inArray(subOrders.id, subOrderIdsToUpdate));
          }

          // c) Order Items ‡§¨‡§®‡§æ‡§è‡§Ç
          for (const subOrderData of batch.subOrdersData) {
              for (const item of subOrderData.items) {
                  await tx.insert(orderItems).values({
                      subOrderId: subOrderData.subOrderId,
                      productId: item.product.id,
                      productName: item.product.name,
                      productImage: item.product.image,
                      productPrice: item.priceAtAdded,
                      productUnit: item.product.unit,
                      quantity: item.quantity,
                      itemTotal: item.totalPrice,
                      createdAt: new Date(),
                      updatedAt: new Date(),
                  });
              }
          }
      }
      
      // 4. ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§ï‡•ã ‡§ñ‡§æ‡§≤‡•Ä ‡§ï‡§∞‡•á‡§Ç
      await tx.delete(cartItems).where(eq(cartItems.userId, userId));
      console.log("‚úÖ Cart items deleted from cartItems table.");

      // Socket.io ‡§á‡§µ‡•á‡§Ç‡§ü
      getIo().emit("new-master-order", {
        masterOrder: masterOrder,
        subOrders: tempSubOrders.map(ts => ({ sellerId: ts.sellerId, subtotal: ts.subtotal, isSelfDelivery: ts.isSelfDelivery })),
      });
      getIo().emit(`user:${userId}`, { type: 'master-order-placed', masterOrder: masterOrder });

      return res.status(201).json({
        message: "Orders placed successfully!",
        masterOrderId: masterOrder.id,
        masterOrderNumber: masterOrder.orderNumber,
        data: masterOrder,
      });

    } catch (error: any) {
      console.error("‚ùå Error placing cart order (transaction rolled back):", error);
      // next(error);
      return res.status(500).json({ message: error.message || "Failed to place order." });
    }
  });
};


/**
 * fetches all orders for the authenticated user.
 * Now fetches Master Orders and populates sub-orders and delivery batch info.
 */
export const getUserOrders = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
  console.log("üîÑ [API] Received request to get user orders.");
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized: User not logged in." });
    }

    const masterOrders = await db.query.orders.findMany({
      where: eq(orders.customerId, userId),
      with: {
        deliveryAddress: true, // ‚úÖ Delivery address directly linked to master order
        subOrders: {
          with: {
            seller: {
              columns: { id: true, businessName: true },
            },
            store: {
              columns: { id: true, storeName: true, address: true, latitude: true, longitude: true },
            },
            orderItems: {
              with: {
                product: {
                  columns: { id: true, name: true, image: true, unit: true },
                },
              },
            },
            deliveryBatch: { // ‚úÖ Sub-order ‡§∏‡•á ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•à‡§ö ‡§ï‡•ã ‡§™‡•â‡§™‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
              with: {
                deliveryBoy: {
                  columns: { id: true, name: true, phone: true, currentLat: true, currentLng: true },
                },
              },
            },
          },
        },
      },
      orderBy: [desc(orders.createdAt)],
    });

    const formattedOrders = masterOrders.map(masterOrder => {
      let parsedDeliveryAddress = {};
      try {
        parsedDeliveryAddress = JSON.parse(masterOrder.deliveryAddress as string);
      } catch (e) {
        console.warn(`Failed to parse deliveryAddress JSON for master order ${masterOrder.id}:`, e);
      }

      // ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•â‡§Ø ‡§î‡§∞ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
      const subOrdersWithDeliveryInfo = masterOrder.subOrders.map(subOrder => {
        const deliveryBoy = subOrder.deliveryBatch?.deliveryBoy || null;
        const deliveryStatus = subOrder.deliveryBatch?.status || (subOrder.isSelfDeliveryBySeller ? 'delivered_by_seller' : 'not_assigned'); // ‚úÖ ‡§∏‡•á‡§≤‡•ç‡§´-‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§≤‡§ó ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏
        const estimatedDeliveryTime = subOrder.deliveryBatch?.estimatedDeliveryTime || null;
        const actualDeliveryTime = subOrder.deliveryBatch?.actualDeliveryTime || null;

        return {
          ...subOrder,
          deliveryBoy: deliveryBoy,
          deliveryStatus: deliveryStatus,
          estimatedDeliveryTime: estimatedDeliveryTime,
          actualDeliveryTime: actualDeliveryTime,
        };
      });

      return {
        ...masterOrder,
        deliveryAddress: parsedDeliveryAddress,
        subOrders: subOrdersWithDeliveryInfo,
        // masterOrder.deliveryCharge ‡§î‡§∞ masterOrder.estimatedDeliveryTime ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à
        // ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§Ø‡§π ‡§Ö‡§¨ ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§î‡§∞ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•à‡§ö ‡§Æ‡•á‡§Ç ‡§π‡•à
      };
    });

    console.log(`‚úÖ [API] Found ${masterOrders.length} master orders for user ${userId}.`);
    res.status(200).json(formattedOrders);
  } catch (error) {
    console.error("‚ùå Error fetching user orders:", error);
    // next(error);
    res.status(500).json({ message: "Failed to fetch orders." });
  }
};

/**
 * fetches the initial tracking details for a specific master order.
 */
export const getOrderTrackingDetails = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
  console.log("üì° [API] Received request to get master order tracking details.");
  try {
    const customerId = req.user?.id;
    const orderId = Number(req.params.orderId);

    if (isNaN(orderId)) return res.status(400).json({ message: "Invalid order ID." });
    if (!customerId) return res.status(401).json({ message: "Unauthorized: User not logged in." });


    const masterOrder = await db.query.orders.findFirst({
      where: and(
        eq(orders.id, orderId),
        eq(orders.customerId, customerId)
      ),
      with: {
        deliveryAddress: true,
        subOrders: {
            with: {
                seller: {
                    columns: { id: true, businessName: true, latitude: true, longitude: true },
                },
                store: {
                    columns: { id: true, storeName: true, address: true, latitude: true, longitude: true },
                },
                deliveryBatch: {
                    with: {
                        deliveryBoy: {
                            columns: { id: true, name: true, phone: true, currentLat: true, currentLng: true },
                        },
                    },
                },
            },
        },
        orderTracking: { // ‚úÖ master order tracking ‡§≠‡•Ä ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à
            orderBy: [desc(orderTracking.createdAt)],
            limit: 5, // ‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§ï‡•Å‡§õ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§á‡§µ‡•á‡§Ç‡§ü
        },
      },
    });

    if (!masterOrder) {
      return res.status(404).json({ message: "Master order not found or access denied." });
    }

    let parsedDeliveryAddress = {};
    try {
      parsedDeliveryAddress = JSON.parse(masterOrder.deliveryAddress as string);
    } catch (e) {
      console.warn(`Failed to parse deliveryAddress JSON for master order ${masterOrder.id}:`, e);
    }

    // ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§¨‡•â‡§Ø ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§î‡§∞ ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Æ‡§æ‡§∞‡•ç‡§ó ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡•á ‡§°‡•á‡§ü‡§æ ‡§è‡§ï‡§§‡•ç‡§∞ ‡§ï‡§∞‡•á‡§Ç
    const deliveryInfo = masterOrder.subOrders.map(subOrder => {
        const deliveryBoy = subOrder.deliveryBatch?.deliveryBoy;
        const deliveryStatus = subOrder.deliveryBatch?.status || (subOrder.isSelfDeliveryBySeller ? 'delivered_by_seller' : 'not_assigned');
        const storeLocation = { lat: subOrder.store?.latitude, lng: subOrder.store?.longitude };

        return {
            subOrderId: subOrder.id,
            sellerId: subOrder.sellerId,
            sellerName: subOrder.seller?.businessName,
            storeLocation: storeLocation,
            deliveryBoy: deliveryBoy ? {
                id: deliveryBoy.id,
                name: deliveryBoy.name,
                phone: deliveryBoy.phone,
                currentLocation: { lat: deliveryBoy.currentLat, lng: deliveryBoy.currentLng },
            } : null,
            deliveryStatus: deliveryStatus,
            estimatedDeliveryTime: subOrder.deliveryBatch?.estimatedDeliveryTime,
            actualDeliveryTime: subOrder.deliveryBatch?.actualDeliveryTime,
            isSelfDelivery: subOrder.isSelfDeliveryBySeller,
        };
    });

    res.status(200).json({
      masterOrderId: masterOrder.id,
      masterOrderNumber: masterOrder.orderNumber,
      status: masterOrder.status, // Master order status
      customerDeliveryAddress: {
        lat: masterOrder.deliveryLat || 0,
        lng: masterOrder.deliveryLng || 0,
        address: (parsedDeliveryAddress as any).addressLine1 || '',
        city: (parsedDeliveryAddress as any).city || '',
        pincode: (parsedDeliveryAddress as any).pincode || '',
        fullName: (parsedDeliveryAddress as any).fullName || '',
        phoneNumber: (parsedDeliveryAddress as any).phoneNumber || '',
      },
      deliveryDetails: deliveryInfo, // ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä
      masterOrderTrackingHistory: masterOrder.orderTracking, // ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä
    });

  } catch (error) {
    console.error("‚ùå Error fetching master order tracking details:", error);
    // next(error);
    res.status(500).json({ message: "Failed to fetch tracking details." });
  }
};

/**
 * fetches details for a specific master order id.
 */
export const getOrderDetail = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
  console.log("üîç [API] Received request to get specific master order details.");
  try {
    const customerId = req.user?.id;
    const orderId = Number(req.params.orderId);

    if (!customerId) return res.status(401).json({ message: "Unauthorized." });
    if (isNaN(orderId)) return res.status(400).json({ message: "Invalid order ID." });

    const masterOrderDetail = await db.query.orders.findFirst({
      where: and(
        eq(orders.id, orderId),
        eq(orders.customerId, customerId)
      ),
      with: {
        deliveryAddress: true,
        subOrders: {
          with: {
            seller: {
              columns: { id: true, businessName: true, businessAddress: true, businessPhone: true },
            },
            store: {
              columns: { id: true, storeName: true, address: true, phone: true },
            },
            orderItems: {
              with: {
                product: {
                  columns: {
                    id: true, name: true, image: true, unit: true, price: true, description: true,
                  },
                },
              },
            },
            deliveryBatch: {
              with: {
                deliveryBoy: {
                  columns: { id: true, name: true, phone: true },
                },
              },
            },
          },
        },
        orderTracking: {
            orderBy: [desc(orderTracking.createdAt)],
        }
      },
    });

    if (!masterOrderDetail) {
      return res.status(404).json({ message: "Master order not found or access denied." });
    }

    let parsedDeliveryAddress = {};
    try {
      parsedDeliveryAddress = JSON.parse(masterOrderDetail.deliveryAddress as string);
    } catch (e) {
      console.warn(`Failed to parse deliveryAddress JSON for master order ${masterOrderDetail.id}:`, e);
    }

    // ‡§∏‡§¨-‡§ë‡§∞‡•ç‡§°‡§∞ ‡§î‡§∞ ‡§â‡§®‡§ï‡•á ‡§Ü‡§á‡§ü‡§Æ ‡§ï‡•ã ‡§è‡§ï ‡§∏‡§æ‡§• ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    const detailedSubOrders = masterOrderDetail.subOrders.map(subOrder => {
        const deliveryBoy = subOrder.deliveryBatch?.deliveryBoy || null;
        const deliveryStatus = subOrder.deliveryBatch?.status || (subOrder.isSelfDeliveryBySeller ? 'delivered_by_seller' : 'not_assigned');
        
        return {
            ...subOrder,
            deliveryBoy: deliveryBoy,
            deliveryStatus: deliveryStatus,
            // seller ‡§î‡§∞ store ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü‡•ç‡§∏ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä subOrder ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ popuplated ‡§π‡•ã‡§Ç‡§ó‡•á
        };
    });

    console.log(`‚úÖ [API] Found master order ${orderId}.`);
    res.status(200).json({
      ...masterOrderDetail,
      deliveryAddress: parsedDeliveryAddress,
      subOrders: detailedSubOrders,
    });
  } catch (error) {
    console.error("‚ùå Error fetching specific master order:", error);
    // next(error);
    res.status(500).json({ message: "Failed to fetch order details." });
  }
};
