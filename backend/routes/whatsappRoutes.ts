// whatsappRoutes.ts
import { Router, Response } from "express";
import { db } from "../server/db";
// ‚ú® ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§§‡•Ä‡§®‡•ã‡§Ç ‡§∏‡•ç‡§ï‡•Ä‡§Æ‡§æ (orders, users, deliveryAddresses) ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§ø‡§è ‡§ó‡§è ‡§π‡•à‡§Ç
import { orders, users, deliveryAddresses } from "../shared/backend/schema";
import { eq } from "drizzle-orm";
import { requireDeliveryBoyAuth } from "../server/middleware/authMiddleware";
import { AuthenticatedRequest } from "../server/types";
import { generateOTP, sendWhatsAppMessage } from "../server/lib/whatsappHelpers";

const router = Router();

// ‡§è‡§ï ‡§π‡•á‡§≤‡•ç‡§™‡§∞ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§ú‡•ã ‡§ï‡§à ‡§∞‡•Ç‡§ü‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§°‡•Å‡§™‡•ç‡§≤‡•Ä‡§ï‡•á‡§ü ‡§≤‡•â‡§ú‡§ø‡§ï ‡§ï‡•ã ‡§ï‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ
// ‡§Ø‡§π ‡§è‡§ï ‡§ë‡§∞‡•ç‡§°‡§∞, ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§î‡§∞ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§∏‡•á ‡§∏‡§≠‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§î‡§∞ ‡§®‡§æ‡§Æ ‡§è‡§ï‡§§‡•ç‡§∞ ‡§ï‡§∞‡•á‡§ó‡§æ
async function getCustomerRecipientInfo(orderId: number) {
  const order = await db.query.orders.findFirst({
    where: eq(orders.id, orderId),
    with: {
      customer: { columns: { id: true, phone: true, name: true } }, // 1. ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡•á ‡§´‡§º‡•ã‡§® ‡§î‡§∞ ‡§®‡§æ‡§Æ
      deliveryAddress: { columns: { id: true, phoneNumber: true, recipientName: true } } // 2. ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§∏‡•á ‡§´‡§º‡•ã‡§® ‡§î‡§∞ ‡§®‡§æ‡§Æ
    },
    columns: { // orders ‡§ü‡•á‡§¨‡§≤ ‡§∏‡•á id ‡§î‡§∞ deliveryBoyId, ‡§Ü‡§¶‡§ø fetch ‡§ï‡§∞‡•á‡§Ç
      id: true,
      deliveryBoyId: true,
    }
  });

  if (!order) return { order: null, recipients: [] };

  const deliveryAddressPhone = order.deliveryAddress?.phoneNumber;
  const deliveryAddressName = order.deliveryAddress?.recipientName;
  const userProfilePhone = order.customer?.phone;
  const userProfileName = order.customer?.name;

  const recipients: { phone: string; name: string }[] = [];
  const uniquePhones = new Set<string>();

  // 1. ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§ï‡§æ ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ (‡§â‡§ö‡•ç‡§ö‡§§‡§Æ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ)
  if (deliveryAddressPhone && !uniquePhones.has(deliveryAddressPhone)) {
    recipients.push({
      phone: deliveryAddressPhone,
      name: deliveryAddressName || userProfileName || "‡§ó‡•ç‡§∞‡§æ‡§π‡§ï" // ‡§®‡§æ‡§Æ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ
    });
    uniquePhones.add(deliveryAddressPhone);
  }

  // 2. ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ (‡§Ø‡§¶‡§ø ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§∏‡•á ‡§Ö‡§≤‡§ó ‡§π‡•ã)
  if (userProfilePhone && !uniquePhones.has(userProfilePhone)) {
    recipients.push({
      phone: userProfilePhone,
      name: userProfileName || deliveryAddressName || "‡§ó‡•ç‡§∞‡§æ‡§π‡§ï" // ‡§®‡§æ‡§Æ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ
    });
    uniquePhones.add(userProfilePhone);
  }
  
  return { order, recipients };
}


/**
 * ‚úÖ Send OTP to Customer (Delivery OTP)
 */
router.post('/send-otp', requireDeliveryBoyAuth, async (req: AuthenticatedRequest, res: Response) => {
  try {
    const deliveryBoyId = req.user?.deliveryBoyId;
    const { orderId } = req.body;
    if (!orderId || !deliveryBoyId) return res.status(400).json({ message: "Order ID and Delivery Boy ID required." });

    const { order, recipients } = await getCustomerRecipientInfo(orderId);

    if (!order || order.deliveryBoyId !== deliveryBoyId) return res.status(404).json({ message: "Order not found or not assigned to you." });

    if (recipients.length === 0) {
      return res.status(400).json({ message: "No valid customer phone number available for this order to send OTP." });
    }

    const otp = generateOTP(6);
    const otpMessage = `‡§Ü‡§™‡§ï‡§æ OTP: ${otp}`;

    // OTP ‡§ï‡•ã ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
    const [updatedOrder] = await db.update(orders)
      .set({ deliveryOtp: otp, deliveryOtpSentAt: new Date() })
      .where(eq(orders.id, orderId))
      .returning();

    if (!updatedOrder) return res.status(500).json({ message: "Failed to save OTP." });

    let sentCount = 0;
    let failedPhones: string[] = [];

    // ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§™‡§∞ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç
    for (const customerInfo of recipients) {
        const whatsappResult = await sendWhatsAppMessage(customerInfo.phone, otpMessage, { orderId, customerName: customerInfo.name });
        if (whatsappResult) {
            sentCount++;
        } else {
            failedPhones.push(customerInfo.phone);
        }
    }

    if (sentCount === 0) {
      // ‡§Ø‡§¶‡§ø ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§®‡§Ç‡§¨‡§∞ ‡§™‡§∞ OTP ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§æ, ‡§§‡•ã OTP ‡§ï‡•ã null ‡§ï‡§∞ ‡§¶‡•á‡§Ç
      await db.update(orders).set({ deliveryOtp: null, deliveryOtpSentAt: null }).where(eq(orders.id, orderId));
      return res.status(500).json({ message: `Failed to send OTP via WhatsApp to any recipient. Failed for: ${failedPhones.join(', ')}` });
    }

    return res.status(200).json({
      success: true,
      message: `OTP sent successfully to ${sentCount} recipient(s).`,
      sentToPhones: recipients.map(r => r.phone), // ‡§∏‡§≠‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§‡§ï‡§∞‡•ç‡§§‡§æ, ‡§ö‡§æ‡§π‡•á ‡§â‡§® ‡§™‡§∞ ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•ã ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç
      failedToPhones: failedPhones,
      otp, // Debugging ‡§ï‡•á ‡§≤‡§ø‡§è OTP ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç, production ‡§Æ‡•á‡§Ç ‡§π‡§ü‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
    });

  } catch (error: any) {
    console.error("Error /send-otp:", error);
    return res.status(500).json({ message: "Server error." });
  }
});


/**
 * ‚úÖ Send Delivery Thanks Message after delivery
 */
router.post('/send-delivery-thanks', async (req: AuthenticatedRequest, res: Response) => {
  try {
    const { orderId } = req.body;
    if (!orderId) return res.status(400).json({ message: "Order ID required." });

    const { order, recipients } = await getCustomerRecipientInfo(orderId);

    if (!order) return res.status(404).json({ message: "Order not found." });

    if (recipients.length === 0) {
      return res.status(400).json({ message: "No valid recipient phone number available for this order to send thanks message." });
    }

    let sentCount = 0;
    let failedPhones: string[] = [];

    for (const customerInfo of recipients) {
        const msg = `‡§π‡•á‡§≤‡•ã ${customerInfo.name}, ‡§Ü‡§™‡§ï‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ #${orderId} ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!`;
        const result = await sendWhatsAppMessage(customerInfo.phone, msg, { orderId, customerName: customerInfo.name });
        if (result) {
            sentCount++;
        } else {
            failedPhones.push(customerInfo.phone);
        }
    }

    if (sentCount === 0) {
      return res.status(500).json({ message: `Failed to send WhatsApp thanks message to any recipient. Failed for: ${failedPhones.join(', ')}` });
    }
    return res.status(200).json({
      success: true,
      message: `Thanks message sent successfully to ${sentCount} recipient(s).`,
      sentToPhones: recipients.map(r => r.phone),
      failedToPhones: failedPhones,
    });

  } catch (error: any) {
    console.error("Error /send-delivery-thanks:", error);
    return res.status(500).json({ message: "Server error." });
  }
});


/**
 * ‚úÖ Send Welcome Message on User Login
 */
router.post('/send-welcome', async (req: AuthenticatedRequest, res: Response) => {
  try {
    const { userId } = req.body;
    if (!userId) return res.status(400).json({ message: "User ID required." });

    // ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§π‡§Æ‡•á‡§Ç ‡§∏‡•Ä‡§ß‡•á ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã fetch ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ
    const user = await db.query.users.findFirst({ where: eq(users.id, userId) });
    if (!user || !user.phone || !user.name) return res.status(404).json({ message: "User not found or phone/name missing." });

    const msg = `‡§π‡•á‡§≤‡•ã ${user.name}, ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à Shopnish ‡§Æ‡•á‡§Ç! üéâ ‡§Ü‡§™ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§∏‡§æ‡§• ‡§ú‡•Å‡§°‡§º‡•á ‡§π‡•à‡§Ç‡•§`;
    const result = await sendWhatsAppMessage(user.phone, msg, { userId });

    if (!result) return res.status(500).json({ message: "Failed to send welcome message." });
    return res.status(200).json({ success: true, message: "Welcome message sent via WhatsApp." });
  } catch (error: any) {
    console.error("Error /send-welcome:", error);
    return res.status(500).json({ message: "Server error." });
  }
});


/**
 * ‚úÖ Placeholder for Weekly Reminder (future)
 */
router.post('/send-weekly-reminder', async (req: AuthenticatedRequest, res: Response) => {
  try {
    // future: fetch all users with last purchase > 7 days, send WhatsApp
    return res.status(200).json({ message: "Weekly reminder endpoint ready." });
  } catch (error: any) {
    console.error("Error /send-weekly-reminder:", error);
    return res.status(500).json({ message: "Server error." });
  }
});

export default router;
