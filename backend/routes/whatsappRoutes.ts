// whatsappRoutes.ts
import { Router, Response } from "express";
import { db } from "../server/db";
// ‚ú® deliveryAddresses ‡§ï‡•ã ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡§®‡§æ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
import { orders, users, deliveryAddresses } from "../shared/backend/schema";
import { eq } from "drizzle-orm";
import { requireDeliveryBoyAuth } from "../server/middleware/authMiddleware";
import { AuthenticatedRequest } from "../server/types";
import { generateOTP, sendWhatsAppMessage } from "../server/lib/whatsappHelpers";

const router = Router();

// --- ‡§π‡•á‡§≤‡•ç‡§™‡§∞ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---

/**
 * ‡§è‡§ï ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡•á ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤ ‡§î‡§∞ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡•á ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§î‡§∞ ‡§®‡§æ‡§Æ ‡§è‡§ï‡§§‡•ç‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
 */
async function getCustomerRecipientInfo(orderId: number) {
  // `with` ‡§ï‡•ç‡§≤‡•â‡§ú‡§º ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ü‡•á‡§¨‡§≤‡•ã‡§Ç ‡§∏‡•á ‡§°‡•á‡§ü‡§æ fetch ‡§ï‡§∞‡•á‡§Ç
  const order = await db.query.orders.findFirst({
    where: eq(orders.id, orderId),
    with: {
      customer: { columns: { id: true, phone: true, name: true } }, // 1. ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤
      deliveryAddress: { columns: { id: true, phoneNumber: true, fullName: true } } // 2. ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§è‡§°‡•ç‡§∞‡•á‡§∏
    },
    columns: { // orders ‡§ü‡•á‡§¨‡§≤ ‡§∏‡•á ‡§ï‡•á‡§µ‡§≤ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ï‡•â‡§≤‡§Æ
      id: true,
      deliveryBoyId: true,
    }
  });

  if (!order) return { order: null, recipients: [] };

  // ‡§ï‡•â‡§≤‡§Æ ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡•á ‡§∏‡•ç‡§ï‡•Ä‡§Æ‡§æ (fullName ‡§î‡§∞ phoneNumber) ‡§∏‡•á ‡§Æ‡•á‡§≤ ‡§ñ‡§æ‡§§‡•á ‡§π‡•à‡§Ç
  const deliveryAddressPhone = order.deliveryAddress?.phoneNumber;
  const deliveryAddressName = order.deliveryAddress?.fullName; // ‚ú® fullName ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
  const userProfilePhone = order.customer?.phone;
  const userProfileName = order.customer?.name; // users ‡§ü‡•á‡§¨‡§≤ ‡§Æ‡•á‡§Ç ‡§®‡§æ‡§Æ firstName/lastName ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® Drizzle Relation ‡§∏‡•á 'name' ‡§Ü ‡§∏‡§ï‡§§‡§æ ‡§π‡•à

  const recipients: { phone: string; name: string }[] = [];
  const uniquePhones = new Set<string>();

  // 1. ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§ï‡§æ ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ (‡§â‡§ö‡•ç‡§ö‡§§‡§Æ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ)
  if (deliveryAddressPhone && !uniquePhones.has(deliveryAddressPhone)) {
    recipients.push({
      phone: deliveryAddressPhone,
      name: deliveryAddressName || userProfileName || "‡§ó‡•ç‡§∞‡§æ‡§π‡§ï"
    });
    uniquePhones.add(deliveryAddressPhone);
  }

  // 2. ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ (‡§Ø‡§¶‡§ø ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§∏‡•á ‡§Ö‡§≤‡§ó ‡§π‡•ã)
  if (userProfilePhone && !uniquePhones.has(userProfilePhone)) {
    recipients.push({
      phone: userProfilePhone,
      name: userProfileName || deliveryAddressName || "‡§ó‡•ç‡§∞‡§æ‡§π‡§ï"
    });
    uniquePhones.add(userProfilePhone);
  }

  return { order, recipients };
}

// --- ‡§∞‡•Ç‡§ü‡•ç‡§∏ ---

/**
 * ‚úÖ Send OTP to Customer (Delivery OTP)
 */
router.post('/send-otp', requireDeliveryBoyAuth, async (req: AuthenticatedRequest, res: Response) => {
  try {
    const deliveryBoyId = req.user?.deliveryBoyId;
    const { orderId } = req.body;
    if (!orderId || !deliveryBoyId) return res.status(400).json({ message: "Order ID and Delivery Boy ID required." });

    const { order, recipients } = await getCustomerRecipientInfo(orderId);

    if (!order || order.deliveryBoyId !== deliveryBoyId) return res.status(404).json({ message: "Order not found or not assigned to you." });

    if (recipients.length === 0) {
      return res.status(400).json({ message: "No valid customer phone number available for this order to send OTP." });
    }

    const otp = generateOTP(6);
    const otpMessage = `‡§Ü‡§™‡§ï‡§æ OTP: ${otp}`;

    // OTP ‡§ï‡•ã ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
    const [updatedOrder] = await db.update(orders)
      .set({ deliveryOtp: otp, deliveryOtpSentAt: new Date() })
      .where(eq(orders.id, orderId))
      .returning();

    if (!updatedOrder) return res.status(500).json({ message: "Failed to save OTP." });

    let sentCount = 0;
    let failedPhones: string[] = [];

    // ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§™‡§∞ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç
    for (const customerInfo of recipients) {
        const whatsappResult = await sendWhatsAppMessage(customerInfo.phone, otpMessage, { orderId, customerName: customerInfo.name });
        if (whatsappResult) {
            sentCount++;
        } else {
            failedPhones.push(customerInfo.phone);
        }
    }

    if (sentCount === 0) {
      // ‡§Ø‡§¶‡§ø ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§®‡§Ç‡§¨‡§∞ ‡§™‡§∞ OTP ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§æ, ‡§§‡•ã OTP ‡§ï‡•ã null ‡§ï‡§∞ ‡§¶‡•á‡§Ç
      await db.update(orders).set({ deliveryOtp: null, deliveryOtpSentAt: null }).where(eq(orders.id, orderId));
      return res.status(500).json({ message: `Failed to send OTP via WhatsApp to any recipient. Failed for: ${failedPhones.join(', ')}` });
    }

    return res.status(200).json({
      success: true,
      message: `OTP sent successfully to ${sentCount} recipient(s).`,
      sentToPhones: recipients.map(r => r.phone),
      failedToPhones: failedPhones,
      otp, 
    });

  } catch (error: any) {
    console.error("Error /send-otp:", error);
    // ‡§Ø‡§π 500 ‡§è‡§∞‡§∞ ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§
    return res.status(500).json({ message: "Server error." });
  }
});


/**
 * ‚úÖ Send Delivery Thanks Message after delivery
 */
router.post('/send-delivery-thanks', async (req: AuthenticatedRequest, res: Response) => {
  try {
    const { orderId } = req.body;
    if (!orderId) return res.status(400).json({ message: "Order ID required." });

    // ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§∏‡•á ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ fetch ‡§ï‡§∞‡•á‡§Ç (‡§ú‡•à‡§∏‡§æ ‡§ï‡§ø ‡§Ö‡§¨ `getCustomerRecipientInfo` ‡§ï‡§∞‡§§‡§æ ‡§π‡•à)
    const { order, recipients } = await getCustomerRecipientInfo(orderId);

    if (!order) return res.status(404).json({ message: "Order not found." });

    if (recipients.length === 0) {
      return res.status(400).json({ message: "No valid recipient phone number available for this order to send thanks message." });
    }

    let sentCount = 0;
    let failedPhones: string[] = [];

    for (const customerInfo of recipients) {
        const msg = `‡§π‡•á‡§≤‡•ã ${customerInfo.name}, ‡§Ü‡§™‡§ï‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ #${orderId} ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!`;
        const result = await sendWhatsAppMessage(customerInfo.phone, msg, { orderId, customerName: customerInfo.name });
        if (result) {
            sentCount++;
        } else {
            failedPhones.push(customerInfo.phone);
        }
    }

    if (sentCount === 0) {
      return res.status(500).json({ message: `Failed to send WhatsApp thanks message to any recipient. Failed for: ${failedPhones.join(', ')}` });
    }
    return res.status(200).json({
      success: true,
      message: `Thanks message sent successfully to ${sentCount} recipient(s).`,
      sentToPhones: recipients.map(r => r.phone),
      failedToPhones: failedPhones,
    });

  } catch (error: any) {
    console.error("Error /send-delivery-thanks:", error);
    return res.status(500).json({ message: "Server error." });
  }
});


/**
 * ‚úÖ Send Welcome Message on User Login
 * Welcome Message ‡§ï‡•á‡§µ‡§≤ ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§™‡§∞ ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç‡•§
 */
router.post('/send-welcome', async (req: AuthenticatedRequest, res: Response) => {
  try {
    const { userId } = req.body;
    if (!userId) return res.status(400).json({ message: "User ID required." });

    const user = await db.query.users.findFirst({ where: eq(users.id, userId) });
    
    // users.name ‡§ï‡•Ä ‡§ú‡§ó‡§π users.firstName ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç (‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡•á ‡§∏‡•ç‡§ï‡•Ä‡§Æ‡§æ ‡§Æ‡•á‡§Ç firstName/lastName ‡§π‡•à)
    const userName = user?.firstName; 
    const userPhone = user?.phone;

    if (!user || !userPhone || !userName) return res.status(404).json({ message: "User not found or phone/name missing." });

    const msg = `‡§π‡•á‡§≤‡•ã ${userName}, ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à Shopnish ‡§Æ‡•á‡§Ç! üéâ ‡§Ü‡§™ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§∏‡§æ‡§• ‡§ú‡•Å‡§°‡§º‡•á ‡§π‡•à‡§Ç‡•§`;
    const result = await sendWhatsAppMessage(userPhone, msg, { userId, customerName: userName });

    if (!result) return res.status(500).json({ message: "Failed to send welcome message." });
    return res.status(200).json({ success: true, message: "Welcome message sent via WhatsApp." });
  } catch (error: any) {
    console.error("Error /send-welcome:", error);
    return res.status(500).json({ message: "Server error." });
  }
});

/**
 * ‚úÖ Placeholder for Weekly Reminder (future)
 */
router.post('/send-weekly-reminder', async (req: AuthenticatedRequest, res: Response) => {
  try {
    return res.status(200).json({ message: "Weekly reminder endpoint ready." });
  } catch (error: any) {
    console.error("Error /send-weekly-reminder:", error);
    return res.status(500).json({ message: "Server error." });
  }
});

export default router;
