// server/routes/cartRouter.ts

import { Router, Response, NextFunction } from 'express'; // ‚úÖ NextFunction ‡§ú‡•ã‡§°‡§º‡§æ
import { db } from '../server/db.ts';
import {
  users,
  cartItems,
  products,
  approvalStatusEnum, // ‚úÖ approvalStatusEnum ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
  sellersPgTable, // ‚úÖ sellersPgTable ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§Ö‡§ó‡§∞ sellerId ‡§ï‡•ã ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠‡§ø‡§§ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•ã
} from '../shared/backend/schema.ts';
import { eq, and, inArray } from 'drizzle-orm';
import { AuthenticatedRequest, requireAuth } from '../server/middleware/authMiddleware.ts';
import { getIO } from '../server/socket.ts';

const cartRouter = Router();

// 1. ‚úÖ GET /api/cart - Get user's cart (‡§Ö‡§¨ cartItems ‡§ü‡•á‡§¨‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à)
cartRouter.get('/', requireAuth, async (req: AuthenticatedRequest, res: Response, next: NextFunction) => { // ‚úÖ NextFunction ‡§ú‡•ã‡§°‡§º‡§æ
  try {
    console.log("üõí [API] Received GET request for cart.");
    const userId = req.user?.id; // firebaseUid ‡§ï‡•á ‡§¨‡§ú‡§æ‡§Ø ‡§∏‡•Ä‡§ß‡•á userId ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
    
    res.set({
        'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0',
    });
    res.removeHeader('ETag'); 

    if (!userId) {
      return res.status(401).json({ error: 'Unauthorized: Missing user ID' });
    }

    // ‡§∏‡•Ä‡§ß‡•á cartItems ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü ‡§°‡§ø‡§ü‡•á‡§≤‡•ç‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• fetch ‡§ï‡§∞‡•á‡§Ç
    const cartItemsWithDetails = await db.query.cartItems.findMany({
      where: eq(cartItems.userId, userId),
      with: {
        product: {
          columns: {
            id: true,
            name: true,
            description: true,
            price: true, // Product ‡§ï‡§æ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•Ç‡§≤‡•ç‡§Ø
            image: true,
            sellerId: true,
            unit: true,
            stock: true, // ‡§∏‡•ç‡§ü‡•â‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≠‡•Ä ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à
            minOrderQty: true,
            maxOrderQty: true,
            approvalStatus: true,
          }
        },
        seller: { // ‚úÖ ‡§∏‡•á‡§≤‡§∞ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§≠‡•Ä fetch ‡§ï‡§∞‡•á‡§Ç
          columns: {
            id: true,
            businessName: true,
          }
        }
      },
      orderBy: (cartItems, { asc }) => [asc(cartItems.createdAt)],
    });

    let totalAmount = 0;
    const cleanedCartData = cartItemsWithDetails.map(item => {
      // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü ‡§°‡•á‡§ü‡§æ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à ‡§î‡§∞ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§π‡•à
      if (!item.product || item.product.approvalStatus !== approvalStatusEnum.enumValues[1]) {
          console.warn(`[CART] Product ${item.productId} not found or not approved, removing from cart view.`);
          return null; // ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü ‡§ï‡•ã ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§∏‡•á ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç
      }

      // priceAtAdded ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç (‡§ú‡•ã ‡§∏‡•ç‡§ï‡•Ä‡§Æ‡§æ ‡§Æ‡•á‡§Ç ‡§π‡•à)
      const effectivePrice = item.priceAtAdded; // ‡§Ö‡§¨ ‡§Ø‡§π ‡§∏‡•ç‡§ï‡•Ä‡§Æ‡§æ ‡§Æ‡•á‡§Ç ‡§π‡•à

      // ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§î‡§∞ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö
      const effectiveQuantity = Math.min(item.quantity, item.product.stock); // ‡§∏‡•ç‡§ü‡•â‡§ï ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§® ‡§π‡•ã‡§®‡•á ‡§¶‡•á‡§Ç
      
      const itemTotal = effectivePrice * effectiveQuantity;
      totalAmount += itemTotal;

      return {
        id: item.id,
        productId: item.productId,
        quantity: effectiveQuantity, // ‡§Ö‡§™‡§°‡•á‡§ü‡•á‡§° ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ
        priceAtAdded: item.priceAtAdded, // ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§
        itemTotal: itemTotal,
        product: {
          id: item.product.id,
          name: item.product.name,
          price: item.product.price, // ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü ‡§ï‡§æ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•Ç‡§≤‡•ç‡§Ø
          image: item.product.image,
          unit: item.product.unit,
          stock: item.product.stock,
          minOrderQty: item.product.minOrderQty,
          maxOrderQty: item.product.maxOrderQty,
        },
        seller: item.seller ? {
          id: item.seller.id,
          businessName: item.seller.businessName,
        } : null,
      };
    }).filter(item => item !== null); // null ‡§Ü‡§á‡§ü‡§Æ‡•ç‡§∏ ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç

    return res.status(200).json({
      message: "Cart fetched successfully",
      items: cleanedCartData,
      totalAmount: totalAmount,
    });

  } catch (error: any) {
    console.error('‚ùå [API] Error fetching cart:', error);
    res.set({ 'Cache-Control': 'no-store, no-cache, must-revalidate' }); 
    // next(error); // ‚úÖ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è next ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
    return res.status(500).json({ error: 'Failed to fetch cart. An unexpected error occurred.' });
  }
});


// 2. ‚úÖ POST /api/cart/add - Add a new item to cart (‡§Ö‡§¨ cartItems ‡§ü‡•á‡§¨‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à)
cartRouter.post('/add', requireAuth, async (req: AuthenticatedRequest, res: Response, next: NextFunction) => { // ‚úÖ NextFunction ‡§ú‡•ã‡§°‡§º‡§æ
  try {
    const userId = req.user?.id;
    const { productId, quantity } = req.body;

    if (!userId) {
      return res.status(401).json({ error: 'Unauthorized: Missing user ID' });
    }
    if (!productId || typeof quantity !== 'number' || quantity <= 0) { // Quantity 0 ‡§Ø‡§æ ‡§®‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä
      return res.status(400).json({ error: 'Invalid productId or quantity.' });
    }

    const [product] = await db.select().from(products).where(eq(products.id, productId)).limit(1);
    if (!product) return res.status(404).json({ error: 'Product not found.' });
    if (product.approvalStatus !== approvalStatusEnum.enumValues[1]) { // 'approved'
      return res.status(400).json({ error: 'Product is not approved for sale.' });
    }
    if (product.stock < quantity) {
      return res.status(400).json({ error: `Insufficient stock. Only ${product.stock} units available.` });
    }
    if (product.minOrderQty && quantity < product.minOrderQty) {
      return res.status(400).json({ error: `Minimum order quantity for ${product.name} is ${product.minOrderQty}.` });
    }
    if (product.maxOrderQty && quantity > product.maxOrderQty) {
      return res.status(400).json({ error: `Maximum order quantity for ${product.name} is ${product.maxOrderQty}.` });
    }

    const priceAtAdded = product.price; // ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü ‡§ï‡§æ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•Ç‡§≤‡•ç‡§Ø
    const sellerId = product.sellerId;

    const [existingItem] = await db
      .select()
      .from(cartItems)
      .where(and(eq(cartItems.userId, userId), eq(cartItems.productId, productId)));

    let item;
    if (existingItem) {
      const newQuantity = existingItem.quantity + quantity;
      if (newQuantity > product.stock) {
        return res.status(400).json({ error: `Cannot add ${quantity} units. Only ${product.stock - existingItem.quantity} units available.` });
      }
      if (product.maxOrderQty && newQuantity > product.maxOrderQty) {
        return res.status(400).json({ error: `Adding this quantity exceeds maximum order quantity of ${product.maxOrderQty} for ${product.name}.` });
      }

      const newTotalPrice = priceAtAdded * newQuantity; // ‡§®‡§è ‡§ï‡•Å‡§≤ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç

      const updatedItem = await db
        .update(cartItems)
        .set({
          quantity: newQuantity,
          totalPrice: newTotalPrice, // ‚úÖ totalPrice ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
          updatedAt: new Date(), // ‚úÖ updatedAt ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        })
        .where(eq(cartItems.id, existingItem.id))
        .returning();
      item = updatedItem[0];
    } else {
      const newTotalPrice = priceAtAdded * quantity; // ‡§ï‡•Å‡§≤ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç

      const newItem = await db
        .insert(cartItems)
        .values({
          userId: userId,
          productId,
          quantity,
          priceAtAdded: priceAtAdded, // ‚úÖ priceAtAdded ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
          totalPrice: newTotalPrice, // ‚úÖ totalPrice ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
          sellerId, // ‚úÖ sellerId ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
          createdAt: new Date(),
          updatedAt: new Date(), // ‚úÖ updatedAt ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        })
        .returning();
      item = newItem[0];
    }

    getIO().emit("cart:updated", { userId: userId }); // userId ‡§ï‡•á ‡§∏‡§æ‡§• ‡§≠‡•á‡§ú‡•á‡§Ç

    return res.status(200).json({ message: 'Item added to cart.', item });
  } catch (error: any) {
    console.error('‚ùå [API] Error adding item to cart:', error);
    // next(error); // ‚úÖ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è next ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
    return res.status(500).json({ error: 'Failed to add item to cart.' });
  }
});


// 3. ‚úÖ PUT /api/cart/:cartItemId - Update quantity (‡§Ö‡§¨ cartItems ‡§ü‡•á‡§¨‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à)
cartRouter.put('/:cartItemId', requireAuth, async (req: AuthenticatedRequest, res: Response, next: NextFunction) => { // ‚úÖ NextFunction ‡§ú‡•ã‡§°‡§º‡§æ
  try {
    const userId = req.user?.id;
    const cartItemId = parseInt(req.params.cartItemId); // parseInt ‡§è‡§ï ‡§π‡•Ä ‡§¨‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
    const { quantity } = req.body;

    if (!userId) {
      return res.status(401).json({ error: 'Unauthorized: Missing user ID' });
    }
    if (isNaN(cartItemId) || typeof quantity !== 'number' || quantity < 0) { // Quantity 0 ‡§Ø‡§æ ‡§®‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä (‡§π‡§ü‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è DELETE ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç)
      return res.status(400).json({ error: 'Invalid cart item ID or quantity.' });
    }

    // ‡§™‡§π‡§≤‡•á ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Ü‡§á‡§ü‡§Æ ‡§î‡§∞ ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä fetch ‡§ï‡§∞‡•á‡§Ç
    const [existingCartItem] = await db.query.cartItems.findMany({
        where: and(eq(cartItems.id, cartItemId), eq(cartItems.userId, userId)),
        with: {
            product: {
                columns: {
                    id: true,
                    stock: true,
                    price: true, // ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü ‡§Æ‡•Ç‡§≤‡•ç‡§Ø
                    minOrderQty: true,
                    maxOrderQty: true,
                }
            }
        }
    });

    if (!existingCartItem || !existingCartItem.product) {
        return res.status(404).json({ message: 'Cart item or associated product not found or does not belong to user.' });
    }

    const product = existingCartItem.product;
    const priceAtAdded = existingCartItem.priceAtAdded; // ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§

    if (quantity === 0) {
        // ‡§Ø‡§¶‡§ø ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ 0 ‡§π‡•à, ‡§§‡•ã ‡§Ü‡§á‡§ü‡§Æ ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç (DELETE ‡§è‡§Ç‡§°‡§™‡•â‡§á‡§Ç‡§ü ‡§ï‡•á ‡§∏‡§Æ‡§æ‡§®)
        const [deletedItem] = await db.delete(cartItems)
            .where(eq(cartItems.id, cartItemId))
            .returning();
        
        if (!deletedItem) {
            return res.status(404).json({ message: 'Cart item not found or failed to delete.' });
        }
        getIO().emit("cart:updated", { userId: userId });
        return res.status(200).json({ message: 'Cart item removed successfully (quantity set to 0).', item: deletedItem });
    }

    if (quantity > product.stock) {
        return res.status(400).json({ error: `Insufficient stock. Only ${product.stock} units available.` });
    }
    if (product.minOrderQty && quantity < product.minOrderQty) {
      return res.status(400).json({ error: `Minimum order quantity for ${product.name} is ${product.minOrderQty}.` });
    }
    if (product.maxOrderQty && quantity > product.maxOrderQty) {
      return res.status(400).json({ error: `Maximum order quantity for ${product.name} is ${product.maxOrderQty}.` });
    }

    const newTotalPrice = priceAtAdded * quantity;

    const [updatedItem] = await db.update(cartItems)
      .set({
        quantity: quantity,
        totalPrice: newTotalPrice, // ‚úÖ totalPrice ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        updatedAt: new Date(), // ‚úÖ updatedAt ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
      })
      .where(eq(cartItems.id, cartItemId)) // ‡§Ø‡§π‡§æ‡§Ç userId ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§™‡§π‡§≤‡•á ‡§π‡•Ä ‡§π‡•ã ‡§ö‡•Å‡§ï‡•Ä ‡§π‡•à
      .returning();

    if (!updatedItem) {
      return res.status(404).json({ message: 'Cart item not found or no changes made.' });
    }

    getIO().emit("cart:updated", { userId: userId });

    return res.status(200).json({ message: 'Cart item updated successfully.', item: updatedItem });
  } catch (error: any) {
    console.error('‚ùå [API] Error updating cart item:', error);
    // next(error); // ‚úÖ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è next ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
    return res.status(500).json({ error: 'Failed to update cart item.' });
  }
});

// 4. ‚úÖ DELETE /api/cart/:cartItemId - Remove a single item (‡§Ö‡§¨ cartItems ‡§ü‡•á‡§¨‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à)
cartRouter.delete('/:cartItemId', requireAuth, async (req: AuthenticatedRequest, res: Response, next: NextFunction) => { // ‚úÖ NextFunction ‡§ú‡•ã‡§°‡§º‡§æ
  try {
    const userId = req.user?.id;
    const cartItemId = parseInt(req.params.cartItemId);

    if (!userId) {
      return res.status(401).json({ error: 'Unauthorized: Missing user ID.' });
    }
    if (isNaN(cartItemId)) {
      return res.status(400).json({ error: 'Invalid cart item ID.' });
    }

    const [deletedItem] = await db.delete(cartItems)
      .where(and(eq(cartItems.id, cartItemId), eq(cartItems.userId, userId))) // ‚úÖ userId ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö
      .returning();

    if (!deletedItem) {
      return res.status(404).json({ message: 'Cart item not found or does not belong to user.' });
    }

    getIO().emit("cart:updated", { userId: userId });

    return res.status(200).json({ message: 'Cart item removed successfully.' });
  } catch (error: any) {
    console.error('‚ùå [API] Error removing cart item:', error);
    // next(error); // ‚úÖ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è next ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
    return res.status(500).json({ error: 'Failed to remove item from cart.' });
  }
});

// 5. ‚úÖ DELETE /api/cart/clear - Clear the entire cart for a user
cartRouter.delete('/clear', requireAuth, async (req: AuthenticatedRequest, res: Response, next: NextFunction) => { // ‚úÖ NextFunction ‡§ú‡•ã‡§°‡§º‡§æ
    try {
        const userId = req.user?.id;
        if (!userId) {
            return res.status(401).json({ error: 'Unauthorized: Missing user ID.' });
        }

        const deletedCount = await db.delete(cartItems)
            .where(eq(cartItems.userId, userId))
            .returning({ id: cartItems.id }); // ‡§Ø‡§π ‡§π‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§ï‡§ø‡§§‡§®‡•á ‡§Ü‡§á‡§ü‡§Æ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§π‡•Å‡§è

        if (deletedCount.length === 0) {
            return res.status(200).json({ message: 'Cart is already empty.' });
        }

        getIO().emit("cart:updated", { userId: userId });

        return res.status(200).json({ message: 'Cart cleared successfully.', clearedItemsCount: deletedCount.length });
    } catch (error: any) {
        console.error('‚ùå [API] Error clearing cart:', error);
        // next(error);
        return res.status(500).json({ error: 'Failed to clear cart.' });
    }
});


export default cartRouter;
  
